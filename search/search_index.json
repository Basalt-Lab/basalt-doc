{"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Basalt","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>Welcome to the Basalt documentation.</p> <p>Basalt is a suite of packages specifically designed for Node.js development.</p> <p>Developed in TypeScript, each module in Basalt aims to provide efficient and easy-to-use tools.</p> Attention <p>Basalt is currently under active development and is subject to frequent changes. Not all packages are available yet, and only some core modules are operational at this time.</p> <p>The documentation and features will continue to evolve.</p> <p>The development of Basalt is progressing gradually as I work on multiple projects simultaneously, so I do my best with the time I have.</p> <p>It is currently recommended for experimental or non-critical projects.</p> <p>Feel free to contact me for any questions or suggestions, or if you want to report a bug.</p>"},{"location":"index.html#contact","title":"Contact","text":"<p>You can reach me at: basalt-lab@proton.me</p> <p>Note</p> <p>If you see any errors, I apologize. I'm doing my best as this is my first time doing this. Don't hesitate to reach out if you want to discuss or contribute to this project. I'm open to any suggestions.</p>"},{"location":"basalt-auth/contribution.html","title":"Contributing to Basalt Auth","text":""},{"location":"basalt-auth/contribution.html#introduction","title":"Introduction","text":"<p>If you wish to contribute to Basalt Auth, it would be greatly appreciated!</p> <p>The following steps will guide you through the contribution process, helping you understand how you can contribute to the project.</p>"},{"location":"basalt-auth/contribution.html#contribution-process","title":"Contribution Process","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork the project    Start by creating a fork of the repository on GitHub. This will help you create your own copy of the project on your account, allowing you to make changes freely.</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)    Create a new branch to work on your feature from the <code>stage</code> branch.</li> <li>Commit your changes (<code>git commit -m 'feat: Add some AmazingFeature'</code>)    Once you have finished your modifications, you can commit them and prepare them for push.    Please use conventional commits for your commit messages, as this will automatically generate release notes.</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)    Once you have finished your modifications, you can push them to your fork.</li> <li>Open a Pull Request to the <code>stage</code> branch    Once you have pushed your modifications to your fork, you can open a Pull Request to the <code>stage</code> branch of the main repository.</li> <li>After your Pull Request is approved, your branch will be merged into <code>stage</code> and deleted.    Once your Pull Request has been approved, your branch will be merged into <code>stage</code> and deleted.</li> </ol> <p>Note</p> <p>Make sure to always update your local branch with the <code>stage</code> branch before starting to work on a new feature to ensure you are working with the latest version of the project.</p>"},{"location":"basalt-auth/contribution.html#additional-notes","title":"Additional Notes","text":"<p>Make sure to test all your modifications and add tests whenever possible.</p> <p>Be open to feedback and suggestions on your pull request.</p>"},{"location":"basalt-auth/contribution.html#acknowledgment","title":"Acknowledgment","text":"<p>Thank you sincerely for your interest in contributing to Basalt Auth. Your help is greatly appreciated and contributes to the improvement of the project for all users.</p>"},{"location":"basalt-auth/getting-started.html","title":"Getting Started","text":""},{"location":"basalt-auth/getting-started.html#quick-start","title":"Quick Start","text":"<p>Welcome to the quick start guide for Basalt Auth!</p>"},{"location":"basalt-auth/getting-started.html#installation","title":"Installation","text":"TypeScript <p>Basalt Auth is written in TypeScript and comes with built-in TypeScript types.</p> <p>If you're using TypeScript, you don't need to install any additional types.</p> <p>If you're using JavaScript, you can ignore the TypeScript types.</p> <p>Integrating Basalt Auth into your project is a breeze.</p> <p>Package: @basalt-lab/basalt-auth</p> <p>Follow these steps to add it to your project:</p> <p>NPM: <pre><code>npm i @basalt-lab/basalt-auth\n</code></pre></p> <p>PNPM: <pre><code>pnpm i @basalt-lab/basalt-auth\n</code></pre></p> npm i @basalt-lab/basalt-authadded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>You are ready to get started! Happy coding \ud83d\ude80</p>"},{"location":"basalt-auth/index.html","title":"Basalt Auth","text":"<p>Warning</p> <p>Basalt is currently in its early stages, so please be patient and feel free to provide feedback on your experience via email: basalt-lab@proton.me.</p>"},{"location":"basalt-auth/index.html#introduction","title":"Introduction","text":"<p>Basalt Auth is a token-based authentication module designed to be easy to use.</p> <p>The uniqueness of Basalt Auth lies in its key pair system: each token is associated with its own pair, a feature that sets it apart from standard JWT tokens.</p> <p>It is a mix of OAT and JWT, where both tokens and public keys need to be stored on the server side for verification. For this purpose, I recommend using a store like Redis or DragonFly.</p>"},{"location":"basalt-auth/index.html#why-basalt-auth","title":"Why Basalt Auth?","text":"<p>The goal behind Basalt Auth was to develop a custom authentication system that takes inspiration from the structure of JWT, but with some subtleties.</p> <p>This approach is not necessarily superior to conventional methods; rather, it is a personal exploration in the design of authentication systems.</p> <p>It is important to note that security is an evolving discipline, and the merits of this structure compared to established standards have not been fully evaluated.</p> <p>Warning</p> <p>Basalt Auth does not seek to replace existing solutions, but rather to offer an alternative for specific use cases.</p>"},{"location":"basalt-auth/index.html#versatility-and-compatibility","title":"Versatility and Compatibility","text":"<p>Basalt Auth is designed to be used in various contexts, whether it's backend or frontend. Its independent nature makes it easy to incorporate into different projects without requiring specific external components.</p>"},{"location":"basalt-auth/references.html","title":"References","text":"<p>You can find the library references here \u27a1\ufe0f https://basalt-lab.github.io/basalt-auth/.</p>"},{"location":"basalt-auth/example/authentication.html","title":"Authentication","text":""},{"location":"basalt-auth/example/authentication.html#token-signature","title":"Token Signature","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiZDk4MTcwMjgtM2EzZS00YWYyLTgwNzYtOTExZGFlZThiMGIzIiwiZXhwIjoiMjAyNC0wMy0yMlQxMjowOTo0MS4yNThaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.e30=.PJpP4zbxX4SaYD7hIj0wZGIqhSs8SbGdJ0W+o/Pr6WJyOhJTvRsIqQpf8sCvTFWWGyCx5ZGeczT0E1RHBE7GBg=="},{"location":"basalt-auth/example/authentication.html#token-signature-with-payload","title":"Token Signature with Payload","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({\n    usename: 'User1',\n});\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({\n    usename: 'User1',\n});\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiMzAzNjQ2ODMtYWYxMC00NjcyLTkwNTQtMmY2YWNmM2E1ZGNlIiwiZXhwIjoiMjAyNC0wMy0yMlQxMjoxMjo1NS41NjlaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.eyJ1c2VuYW1lIjoiVXNlcjEifQ==.heBWyPtSqmwR/FTShaeqBm7NtCxxE2/faIRc1vQG80mMwOlTTzeWcPD8iNecwtkij/GW6RlEADex4uxCjULFAw=="},{"location":"basalt-auth/example/authentication.html#token-signature-with-expiration-time","title":"Token Signature with Expiration Time","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, BasaltTokenExpiry } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\n// you can use enum or number (default is 1 hour)\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({}, BasaltTokenExpiry.ONE_DAY);\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\n// you can use enum or number (default is 1 hour)\nconst tokenSignResult = basaltToken.sign({}, BasaltTokenExpiry.ONE_DAY);\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiZTg5YjYzYTAtMjY0NS00ZjQwLWE5YzYtOGM1Yzg0NmIwNzNlIiwiZXhwIjoiMjAyNC0wMy0yM1QxMToxMDoyMC43NjVaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.e30=.8f72CeURHH/lYENBqozW1PsmVAr3RLHtBm6hbk/TY1VoamD4WYm1TakCdVQhlUVCL3nYRaFzyQ8zhuS5b3vlCg=="},{"location":"basalt-auth/example/authentication.html#token-signature-with-issuer-and-audience","title":"Token Signature with Issuer and Audience","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, BasaltTokenExpiry } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\n// default issuer is 'Basalt-Issuer' and default audience is 'Basalt-Audience'\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign(\n    {}, BasaltTokenExpiry.ONE_HOUR, 'Basalt-issuer', 'Basalt-audience'\n);\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\n// default issuer is 'Basalt-Issuer' and default audience is 'Basalt-Audience'\nconst tokenSignResult = basaltToken.sign(\n    {}, BasaltTokenExpiry.ONE_HOUR, 'Basalt-issuer', 'Basalt-audience'\n);\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiNzBmYTFiZDEtOWEwNy00Mzk5LWI4Y2YtZTg3ZTNkNDVhNzU2IiwiZXhwIjoiMjAyNC0wMy0yMlQxMjoxMTozOS4zNDZaIiwiaXNzdWVyIjoiQmFzYWx0LWlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LWF1ZGllbmNlIn0=.e30=.3teaXCzVkSLI5+1Hr84le4l9FqqZFjLeHAYGqSDOzK9453tI276ysihygMA5oq8aabYSl4/Fn6Hm5T/p+88ZDQ=="},{"location":"basalt-auth/example/authentication.html#token-verification","title":"Token Verification","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\ntry {\n    basaltToken.verify(tokenSignResult.token, tokenSignResult.publicKey)\n    console.log('Token is valid');\n} catch (error) {\n    console.error(error);\n}\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\ntry {\n    basaltToken.verify(tokenSignResult.token, tokenSignResult.publicKey)\n    console.log('Token is valid');\n} catch (error) {\n    console.error(error);\n}\n</code></pre> node example.jsToken is valid"},{"location":"basalt-auth/example/authentication.html#token-uuid-retrieval","title":"Token UUID Retrieval","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getTokenUuid(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getTokenUuid(tokenSignResult.token));\n</code></pre> node example.jsc4a198c4-2717-470d-886f-bc2921badd8f"},{"location":"basalt-auth/example/authentication.html#expiration-retrieval","title":"Expiration Retrieval","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getExpirationDate(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getExpirationDate(tokenSignResult.token));\n</code></pre> node example.js2024-03-22T12:03:38.266Z"},{"location":"basalt-auth/example/authentication.html#token-audience-retrieval","title":"Token Audience Retrieval","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getAudience(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getAudience(tokenSignResult.token));\n</code></pre> node example.jsBasalt-Audience"},{"location":"basalt-auth/example/authentication.html#token-issuer-retrieval","title":"Token Issuer Retrieval","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getIssuer(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getIssuer(tokenSignResult.token));\n</code></pre> node example.jsBasalt-Issuer"},{"location":"basalt-auth/example/authentication.html#token-header-retrieval","title":"Token Header Retrieval","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, type IBasaltTokenHeader } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconst tokenHeader: IBasaltTokenHeader = basaltToken.getHeader(tokenSignResult.token);\nconsole.log(tokenHeader);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconst tokenHeader = basaltToken.getHeader(tokenSignResult.token);\nconsole.log(tokenHeader);\n</code></pre> node example.js{  uuid: '82e7fa41-44b4-4fa8-ac31-ae309234bb8b',  exp: '2024-03-22T12:19:58.187Z',  issuer: 'Basalt-Audience',  audience: 'Basalt-Audience'}"},{"location":"basalt-auth/example/authentication.html#token-payload-retrieval","title":"Token Payload Retrieval","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({\n    username: 'user1'\n});\nconst tokenPayload: { username: string } = basaltToken.getPayload(tokenSignResult.token);\nconsole.log(tokenPayload);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({\n    username: 'user1'\n});\nconst tokenPayload = basaltToken.getPayload(tokenSignResult.token);\nconsole.log(tokenPayload);\n</code></pre> node example.js{ username: 'user1' }"},{"location":"basalt-auth/example/authentication.html#check-if-the-token-has-expired","title":"Check if the token has expired","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\nconsole.log(basaltToken.isExpired(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\nconsole.log(basaltToken.isExpired(tokenSignResult.token));\n</code></pre> node example.jsfalse"},{"location":"basalt-helper/contribution.html","title":"Contributing to Basalt Helper","text":""},{"location":"basalt-helper/contribution.html#introduction","title":"Introduction","text":"<p>If you wish to contribute to Basalt Helper, it would be greatly appreciated!</p> <p>The following steps will guide you through the contribution process, helping you understand how you can contribute to the project.</p>"},{"location":"basalt-helper/contribution.html#contribution-process","title":"Contribution Process","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork the project    Start by creating a fork of the repository on GitHub. This will help you create your own copy of the project on your account, allowing you to make changes freely.</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)    Create a new branch to work on your feature from the <code>stage</code> branch.</li> <li>Commit your changes (<code>git commit -m 'feat: Add some AmazingFeature'</code>)    Once you have finished your modifications, you can commit them and prepare them for push.    Please use conventional commits for your commit messages, as this will automatically generate release notes.</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)    Once you have finished your modifications, you can push them to your fork.</li> <li>Open a Pull Request to the <code>stage</code> branch    Once you have pushed your modifications to your fork, you can open a Pull Request to the <code>stage</code> branch of the main repository.</li> <li>After your Pull Request is approved, your branch will be merged into <code>stage</code> and deleted.    Once your Pull Request has been approved, your branch will be merged into <code>stage</code> and deleted.</li> </ol> <p>Note</p> <p>Make sure to always update your local branch with the <code>stage</code> branch before starting to work on a new feature to ensure you are working with the latest version of the project.</p>"},{"location":"basalt-helper/contribution.html#additional-notes","title":"Additional Notes","text":"<p>Make sure to test all your modifications and add tests whenever possible.</p> <p>Be open to feedback and suggestions on your pull request.</p>"},{"location":"basalt-helper/contribution.html#acknowledgment","title":"Acknowledgment","text":"<p>Thank you sincerely for your interest in contributing to Basalt Helper. Your help is greatly appreciated and contributes to the improvement of the project for all users.</p>"},{"location":"basalt-helper/getting-started.html","title":"Getting Started","text":""},{"location":"basalt-helper/getting-started.html#quick-start","title":"Quick Start","text":"<p>Welcome to the quick start guide for Basalt Helper!</p>"},{"location":"basalt-helper/getting-started.html#installation","title":"Installation","text":"TypeScript <p>Basalt Helper is written in TypeScript and comes with built-in TypeScript types.</p> <p>If you're using TypeScript, you don't need to install any additional types.</p> <p>If you're using JavaScript, you can ignore the TypeScript types.</p> <p>Integrating Basalt Helper into your project is a breeze.</p> <p>Package: @basalt-lab/basalt-helper</p> <p>Follow these steps to add it to your project:</p> <p>NPM: <pre><code>npm i @basalt-lab/basalt-helper\n</code></pre></p> <p>PNPM: <pre><code>pnpm i @basalt-lab/basalt-helper\n</code></pre></p> npm i @basalt-lab/basalt-helperadded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>You are ready to get started! Happy coding \ud83d\ude80</p>"},{"location":"basalt-helper/index.html","title":"Basalt Helper","text":"<p>Warning</p> <p>Basalt is currently in its early stages, so please be patient and feel free to provide feedback on your experience via email: basalt-lab@proton.me.</p>"},{"location":"basalt-helper/index.html#introduction","title":"Introduction","text":"<p>Basalt Helper is a utility package designed to simplify development in Node.js.</p> <p>It provides several tools that are intended to be easy to use and efficient, allowing developers to save time and focus on the business logic of their applications by avoiding the hassle of common tasks.</p>"},{"location":"basalt-helper/index.html#why-basalt-helper","title":"Why Basalt Helper?","text":"<p>The choice of Basalt Helper is justified by its simplicity and efficiency.</p> <p>It is designed to be easy to integrate into any Node.js project, offering a variety of tools to simplify common development tasks.</p> <p>It will continue to evolve and offer new features, while remaining as simple as possible for developers.</p>"},{"location":"basalt-helper/references.html","title":"References","text":"<p>You can find the library references here \u27a1\ufe0f https://basalt-lab.github.io/basalt-helper/.</p>"},{"location":"basalt-helper/example/data/deep-clone.html","title":"Deep-Clone","text":""},{"location":"basalt-helper/example/data/deep-clone.html#deep-cloning-data","title":"Deep cloning data","text":"TypeScriptJavaScript <pre><code>import { deepClone } from '@basalt-lab/basalt-helper';\n\nconst data1: { test: { test: string } } = {\n    test: {\n        test: 'test'\n    }\n};\nconst data2: number[][] = [[1, 2, 3], [4, 5, 6]];\nconst data3: { test: { test: number[] } } = {\n    test: {\n        test: [1, 2, 3]\n    }\n};\nconst data4: ({ test: number[] })[] = [\n    {\n        test: [1, 2, 3]\n    },\n    {\n        test: [4, 5, 6]\n    }\n];\n\nconst clonedData1: { test: { test: string } } = deepClone(data1);\nconst clonedData2: number[][] = deepClone(data2);\nconst clonedData3: { test: { test: number[] } } = deepClone(data3);\nconst clonedData4: ({ test: number[] })[] = deepClone(data4);\n\nconsole.log(clonedData1 === data1);\nconsole.log(clonedData2 === data2);\nconsole.log(clonedData3 === data3);\nconsole.log(clonedData4 === data4);\n</code></pre> <pre><code>const { deepClone } = require('@basalt-lab/basalt-helper');\n\nconst data1 = {\n    test: {\n        test: 'test'\n    }\n};\nconst data2 = [[1, 2, 3], [4, 5, 6]];\nconst data3 = {\n    test: {\n        test: [1, 2, 3]\n    }\n};\nconst data4 = [\n    {\n        test: [1, 2, 3]\n    },\n    {\n        test: [4, 5, 6]\n    }\n];\n\nconst clonedData1 = deepClone(data1);\nconst clonedData2 = deepClone(data2);\nconst clonedData3 = deepClone(data3);\nconst clonedData4 = deepClone(data4);\n\nconsole.log(clonedData1 === data1);\n</code></pre> node example.jsfalsefalsefalsefalse"},{"location":"basalt-helper/example/data/filter.html","title":"Filter","text":""},{"location":"basalt-helper/example/data/filter.html#include-only-certain-keys","title":"Include only certain keys","text":"TypeScriptJavaScript <pre><code>import { filterByKeyInclusion } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByKeyInclusion(data, ['a', 'b', 'c']);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByKeyInclusion } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByKeyInclusion(data, ['a', 'b', 'c']);\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a', b: 'b', c: 'c' }"},{"location":"basalt-helper/example/data/filter.html#include-only-certain-keys-and-only-if-they-have-a-value","title":"Include only certain keys and only if they have a value","text":"TypeScriptJavaScript <pre><code>import { filterByKeyInclusion } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: undefined; c: null; d: string } = {\n    a: 'a',\n    b: undefined,\n    c: null,\n    d: 'd',\n};\n\nconst filteredData = filterByKeyInclusion(data, ['a', 'b', 'c'], true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByKeyInclusion } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: undefined,\n    c: null,\n    d: 'd',\n};\n\nconst filteredData = filterByKeyInclusion(data, ['a', 'b', 'c'], true);\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a' }"},{"location":"basalt-helper/example/data/filter.html#exclude-certain-keys","title":"Exclude certain keys","text":"TypeScriptJavaScript <pre><code>import { filterByKeyExclusion } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByKeyExclusion(data, ['a', 'b']);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByKeyExclusion } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByKeyExclusion(data, ['a', 'b']);\nconsole.log(filteredData);\n</code></pre> node example.js{ c: 'c', d: 'd' }"},{"location":"basalt-helper/example/data/filter.html#exclude-certain-keys-and-exclude-those-that-have-no-value","title":"Exclude certain keys and exclude those that have no value","text":"TypeScriptJavaScript <pre><code>import { filterByKeyExclusion } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: null; c: undefined; d: string } = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = filterByKeyExclusion(data, ['a'], true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByKeyExclusion } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = filterByKeyExclusion(data, ['a'], true);\nconsole.log(filteredData);\n</code></pre> node example.js{ d: 'd' }"},{"location":"basalt-helper/example/data/filter.html#include-keys-based-on-a-pattern","title":"Include keys based on a pattern","text":"TypeScriptJavaScript <pre><code>import { filterByValue } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value: string): boolean =&gt; value === 'a' || value === 'b');\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByValue } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value) =&gt; value === 'a' || value === 'b');\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a', b: 'b' }"},{"location":"basalt-helper/example/data/filter.html#exclude-keys-based-on-a-pattern","title":"Exclude keys based on a pattern","text":"TypeScriptJavaScript <pre><code>import { filterByValue } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value: string): boolean =&gt; value !== 'a' &amp;&amp; value !== 'b');\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByValue } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value) =&gt; value !== 'a' &amp;&amp; value !== 'b');\nconsole.log(filteredData);\n</code></pre> node example.js{ c: 'c', d: 'd' }"},{"location":"basalt-helper/example/data/filter.html#exclude-keys-based-on-a-pattern-and-exclude-those-without-a-value","title":"Exclude keys based on a pattern and exclude those without a value","text":"TypeScriptJavaScript <pre><code>import { filterByValue } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: null; c: undefined; d: string } = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value: unknown): boolean =&gt; value !== 'a', true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByValue } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value) =&gt; value !== 'a', true);\nconsole.log(filteredData);\n</code></pre> node example.js{ d: 'd' }"},{"location":"basalt-helper/example/data/transform.html","title":"Transform","text":""},{"location":"basalt-helper/example/data/transform.html#transforming-object-keys-to-camelcase","title":"Transforming object keys to camelCase","text":"TypeScriptJavaScript <pre><code>import { transformKeys, BasaltCamelCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltCamelCaseTransformer()));\n</code></pre> <pre><code>const { transformKeys, BasaltCamelCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltCamelCaseTransformer()));\n</code></pre> node example.js{  camelCase: undefined,  pascalCase: undefined,  kebabCase: undefined,  snakeCase: undefined}"},{"location":"basalt-helper/example/data/transform.html#transforming-object-keys-to-pascalcase","title":"Transforming object keys to PascalCase","text":"TypeScriptJavaScript <pre><code>import { transformKeys, BasaltPascalCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltPascalCaseTransformer()));\n</code></pre> <pre><code>const { transformKeys, BasaltPascalCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltPascalCaseTransformer()));\n</code></pre> node example.js{  CamelCase: undefined,  PascalCase: undefined,  KebabCase: undefined,  SnakeCase: undefined}"},{"location":"basalt-helper/example/data/transform.html#transforming-object-keys-to-kebab-case","title":"Transforming object keys to kebab-case","text":"TypeScriptJavaScript <pre><code>import { transformKeys, BasaltKebabCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltKebabCaseTransformer()));\n</code></pre> <pre><code>const { transformKeys, BasaltKebabCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltKebabCaseTransformer()));\n</code></pre> node example.js{  'camel-case': undefined,  'pascal-case': undefined,  'kebab-case': undefined,  'snake-case': undefined}"},{"location":"basalt-helper/example/data/transform.html#transforming-object-keys-to-snake_case","title":"Transforming object keys to snake_case","text":"TypeScriptJavaScript <pre><code>import { transformKeys, BasaltSnakeCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltSnakeCaseTransformer()));\n</code></pre> <pre><code>const { transformKeys, BasaltSnakeCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltSnakeCaseTransformer()));\n</code></pre> node example.js{  camel_case: undefined,  pascal_case: undefined,  kebab_case: undefined,  snake_case: undefined}"},{"location":"basalt-helper/example/security/password.html","title":"Password","text":""},{"location":"basalt-helper/example/security/password.html#hashing-a-password","title":"Hashing a Password","text":"TypeScriptJavaScript <pre><code>import { BasaltPassword } from '@basalt-lab/basalt-core';\n\nconst main = async (): Promise&lt;void&gt; =&gt; {\n    const password: string = 'password';\n    const hashedPassword: string = await BasaltPassword.hashPassword(password);\n    console.log(hashedPassword);\n};\nmain();\n</code></pre> <pre><code>const { BasaltPassword } = require('@basalt-lab/basalt-core');\n\nconst main = async () =&gt; {\n    const password = 'password';\n    const hashedPassword = await BasaltPassword.hashPassword(password);\n    console.log(hashedPassword);\n};\nmain();\n</code></pre> node example.js$argon2id$v=19$m=65536,t=3,p=20$W1Qv4XJ+jaVDI04sLFukTYXI/7FYuyeavMLNUXnnrPQ$JfQgEbewRGjjGIpGEIDp/vIqeX7avK2DqYIddilsqng"},{"location":"basalt-helper/example/security/password.html#verifying-a-password","title":"Verifying a Password","text":"TypeScriptJavaScript <pre><code>import { BasaltPassword } from '@basalt-lab/basalt-core';\n\nconst main = async (): Promise&lt;void&gt; =&gt; {\n    const password: string = 'password';\n    const hashedPassword: string = await BasaltPassword.hashPassword(password);\n    const isPasswordValid: boolean = await BasaltPassword.verifyPassword(password, hashedPassword);\n    console.log(isPasswordValid);\n};\nmain();\n</code></pre> <pre><code>const { BasaltPassword } = require('@basalt-lab/basalt-core');\n\nconst main = async () =&gt; {\n    const password = 'password';\n    const hashedPassword = await BasaltPassword.hashPassword(password);\n    const isPasswordValid = await BasaltPassword.verifyPassword(password, hashedPassword);\n    console.log(isPasswordValid);\n};\nmain();\n</code></pre> node example.jstrue"},{"location":"basalt-http/index.html","title":"Basalt HTTP","text":"<p>Cooming soon...</p>"},{"location":"basalt-logger/contribution.html","title":"Contributing to Basalt Logger","text":""},{"location":"basalt-logger/contribution.html#introduction","title":"Introduction","text":"<p>If you wish to contribute to Basalt Logger, it would be greatly appreciated!</p> <p>The following steps will guide you through the contribution process, helping you understand how you can contribute to the project.</p>"},{"location":"basalt-logger/contribution.html#contribution-process","title":"Contribution Process","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork the project    Start by creating a fork of the repository on GitHub. This will help you create your own copy of the project on your account, allowing you to make changes freely.</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)    Create a new branch to work on your feature from the <code>stage</code> branch.</li> <li>Commit your changes (<code>git commit -m 'feat: Add some AmazingFeature'</code>)    Once you have finished your modifications, you can commit them and prepare them for push.    Please use conventional commits for your commit messages, as this will automatically generate release notes.</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)    Once you have finished your modifications, you can push them to your fork.</li> <li>Open a Pull Request to the <code>stage</code> branch    Once you have pushed your modifications to your fork, you can open a Pull Request to the <code>stage</code> branch of the main repository.</li> <li>After your Pull Request is approved, your branch will be merged into <code>stage</code> and deleted.    Once your Pull Request has been approved, your branch will be merged into <code>stage</code> and deleted.</li> </ol> <p>Note</p> <p>Make sure to always update your local branch with the <code>stage</code> branch before starting to work on a new feature to ensure you are working with the latest version of the project.</p>"},{"location":"basalt-logger/contribution.html#additional-notes","title":"Additional Notes","text":"<p>Make sure to test all your modifications and add tests whenever possible.</p> <p>Be open to feedback and suggestions on your pull request.</p>"},{"location":"basalt-logger/contribution.html#acknowledgment","title":"Acknowledgment","text":"<p>Thank you sincerely for your interest in contributing to Basalt Logger. Your help is greatly appreciated and contributes to the improvement of the project for all users.</p>"},{"location":"basalt-logger/getting-started.html","title":"Getting Started","text":""},{"location":"basalt-logger/getting-started.html#quick-start","title":"Quick Start","text":"<p>Welcome to the quick start guide for Basalt Logger!</p>"},{"location":"basalt-logger/getting-started.html#installation","title":"Installation","text":"TypeScript <p>Basalt Logger is written in TypeScript and comes with built-in TypeScript types.</p> <p>If you're using TypeScript, you don't need to install any additional types.</p> <p>If you're using JavaScript, you can ignore the TypeScript types.</p> <p>Integrating Basalt Logger into your project is a breeze.</p> <p>Package: @basalt-lab/basalt-logger</p> <p>Follow these steps to add it to your project:</p> <p>NPM: <pre><code>npm i @basalt-lab/basalt-logger\n</code></pre></p> <p>PNPM: <pre><code>pnpm i @basalt-lab/basalt-logger\n</code></pre></p> npm i @basalt-lab/basalt-loggeradded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>You are ready to get started! Happy coding \ud83d\ude80</p>"},{"location":"basalt-logger/index.html","title":"Basalt Logger","text":"<p>Warning</p> <p>Basalt is currently in its early stages, so please be patient and feel free to provide feedback on your experience via email: basalt-lab@proton.me.</p>"},{"location":"basalt-logger/index.html#introduction","title":"Introduction","text":"<p>Basalt Logger is a flexible and robust logging library for TypeScript/JavaScript, designed for easy and intuitive use in various development environments. With its modular structure and extensible logging strategies, Basalt Logger seamlessly adapts to any project requiring detailed and customizable logging.</p> <p>The ease of integration of Basalt Logger into your TypeScript/JavaScript applications allows you to enhance your projects with a powerful logging system without adding unnecessary complexity to your code.</p>"},{"location":"basalt-logger/index.html#why-basalt-logger","title":"Why Basalt Logger?","text":"<ul> <li>Versatility: Adaptable to various environments and requirements, thanks to its flexible architecture.</li> <li>Extensibility: Allows the addition of custom logging strategies, such as logging to the console or to files. You can also create your own logging strategies to meet specific needs.</li> <li>Ease of use: Designed to be intuitive, with a simple API and code examples for quick start.</li> <li>Performance and Non-Blocking: Designed to be lightweight and efficient, Basalt Logger ensures fast and non-blocking logging, minimizing the impact on application performance.</li> </ul>"},{"location":"basalt-logger/references.html","title":"References","text":"<p>You can find the library references here \u27a1\ufe0f https://basalt-lab.github.io/basalt-logger/.</p>"},{"location":"basalt-logger/example/logger.html","title":"Logger","text":""},{"location":"basalt-logger/example/logger.html#adding-a-log-strategy","title":"Adding a Log Strategy","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.log('hello world');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.log('hello world');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : hello world"},{"location":"basalt-logger/example/logger.html#removing-a-specific-log-strategy","title":"Removing a Specific Log Strategy","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.removeStrategy('console');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.removeStrategy('console');\n</code></pre>"},{"location":"basalt-logger/example/logger.html#removing-all-log-strategies","title":"Removing All Log Strategies","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.clearStrategies();\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.clearStrategies();\n</code></pre>"},{"location":"basalt-logger/example/logger.html#creating-a-log-strategy","title":"Creating a Log Strategy","text":"TypeScriptJavaScript <pre><code>import { appendFileSync } from 'fs';\nimport { BasaltLogger, ILoggerStrategy, LogLevels}  from '@basalt-lab/basalt-logger';\n\nclass FileLoggerStrategy implements ILoggerStrategy {\n    public log(level: LogLevels, date: Date, object: unknown): void {\n        const prefixDate: string = `[${date.toISOString().replace(/T/, ' ').replace(/\\..+/, '')}]`;\n        const sanitizedObject: string = typeof object === 'string' ? object : JSON.stringify(object);\n        const message: string = `${prefixDate} ${level} : ${sanitizedObject}`;\n        appendFile('./test.log', `${message}\\n`, (err): void =&gt; {\n            if (err) throw err;\n        });\n    }\n}\nBasaltLogger.addStrategy('file', new FileLoggerStrategy());\nBasaltLogger.log('Hello World');\n</code></pre> <pre><code>const { appendFileSync } = require('fs');\nconst { BasaltLogger, LogLevels } = require('@basalt-lab/basalt-logger');\n\nclass FileLoggerStrategy {\n    log(level, date, object) {\n        const prefixDate = `[${date.toISOString().replace(/T/, ' ').replace(/\\..+/, '')}]`;\n        const sanitizedObject = typeof object === 'string' ? object : JSON.stringify(object);\n        const message = `${prefixDate} ${level} : ${sanitizedObject}`;\n        appendFile('./test.log', `${message}\\n`, (err) =&gt; {\n            if (err) throw err;\n        });\n    }\n}\nBasaltLogger.addStrategy('file', new FileLoggerStrategy());\nBasaltLogger.log('Hello World');\n</code></pre> node example.jscat test.log[2023-11-21 00:00:00] LOG : Hello World"},{"location":"basalt-logger/example/logger.html#adding-multiple-log-strategies","title":"Adding Multiple Log Strategies","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy}  from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nBasaltLogger.log('Hello World');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nBasaltLogger.log('Hello World');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : Hello Worldcat log.txt[2023-11-21 00:00:00] LOG : Hello World"},{"location":"basalt-logger/example/logger.html#all-log-levels","title":"All Log Levels","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy }  from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.log('hello world');\nBasaltLogger.info('hello world');\nBasaltLogger.debug('hello world');\nBasaltLogger.warn('hello world');\nBasaltLogger.error('hello world');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.log('hello world');\nBasaltLogger.info('hello world');\nBasaltLogger.debug('hello world');\nBasaltLogger.warn('hello world');\nBasaltLogger.error('hello world');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : hello world[2023-11-21 00:00:00] INFO : hello world[2023-11-21 00:00:00] DEBUG : hello world[2023-11-21 00:00:00] WARN : hello world[2023-11-21 00:00:00] ERROR : hello world"},{"location":"basalt-logger/example/logger.html#log-on-specific-strategies","title":"Log on specific strategies","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy}  from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nBasaltLogger.log('console strategy', ['console']);\nBasaltLogger.log('file strategy', ['file']);\nBasaltLogger.log('console and file strategy', ['console', 'file']);\nBasaltLogger.log('all strategies');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nBasaltLogger.log('console strategy', ['console']);\nBasaltLogger.log('file strategy', ['file']);\nBasaltLogger.log('console and file strategy', ['console', 'file']);\nBasaltLogger.log('all strategies');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : console strategy[2023-11-21 00:00:00] LOG : console and file strategy[2023-11-21 00:00:00] LOG : all strategiescat log.txt[2023-11-21 00:00:00] LOG : file strategy[2023-11-21 00:00:00 LOG : console and file strategy[2023-11-21 00:00:00 LOG : all strategies"},{"location":"basalt-socket/index.html","title":"Basalt Socket","text":"<p>Cooming soon...</p>"},{"location":"fr/index.html#introduction","title":"Introduction","text":"<p>Bienvenue dans la documentation de Basalt.</p> <p>Basalt est une suite de packages sp\u00e9cialement con\u00e7ue pour le d\u00e9veloppement en Node.js.  </p> <p>\u00c9labor\u00e9 en TypeScript, chaque module de Basalt a pour objectif de fournir des outils efficaces et simples \u00e0 utiliser.</p> Attention <p>Basalt est actuellement en d\u00e9veloppement actif, et est sujet \u00e0 des changements fr\u00e9quents. Tous les packages ne sont pas encore disponibles, et seuls certains modules de base sont op\u00e9rationnels \u00e0 ce jour.</p> <p>La documentation et les fonctionnalit\u00e9s continueront d'\u00e9voluer.</p> <p>Le d\u00e9veloppement de Basalt avance peu \u00e0 peu, je travail sur plusieurs projets en parall\u00e8le, je fais donc au mieux avec le temps que je dispose.</p> <p>Il est actuellement recommand\u00e9 pour des projets exp\u00e9rimentaux ou non critiques.</p> <p>N'h\u00e9sitez pas \u00e0 me contacter pour toute question ou suggestion ou m\u00eame si vous souhaitez rapporter un bug.</p>"},{"location":"fr/index.html#contact","title":"Contact","text":"<p>Vous pouvez me contacter sur : basalt-lab@proton.me</p> <p>Note</p> <p>Si vous voyez des erreurs, j'en suis vraiment d\u00e9sol\u00e9 je fais de mon mieux c'est la premi\u00e8re fois que je fais \u00e7a. N'h\u00e9sitez pas si vous souhait\u00e9 discuter ou participer \u00e0 ce projet, je suis ouvert \u00e0 toute proposition.</p>"},{"location":"fr/basalt-auth/contribution.html","title":"Contribuer \u00e0 Basalt Auth","text":""},{"location":"fr/basalt-auth/contribution.html#introduction","title":"Introduction","text":"<p>Si vous souhaiter contribuer \u00e0 Basalt Auth, ce serait avec plaisir !</p> <p>Les \u00e9tapes suivantes vous guideront \u00e0 travers le processus de contribution, en vous aidant \u00e0 comprendre comment vous pouvez apporter votre aide au projet.</p>"},{"location":"fr/basalt-auth/contribution.html#processus-de-contribution","title":"Processus de contribution","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork le projet    Commencez par cr\u00e9er un fork du d\u00e9p\u00f4t sur GitHub. Cela vous aidera \u00e0 cr\u00e9er votre propre copie du projet sur votre compte, vous permettant d'y apporter des modifications librement.</li> <li>Cr\u00e9ez votre branche de fonctionnalit\u00e9 (<code>git checkout -b feature/AmazingFeature</code>)     Cr\u00e9ez une nouvelle branche pour travailler sur votre fonctionnalit\u00e9 \u00e0 partir de la branche <code>stage</code>.</li> <li>Committez vos changements (<code>git commit -m 'feat: Add some AmazingFeature'</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les commiter et les pr\u00e9parer pour le push.     Veuillez utiliser des conventionnal commits pour vos messages de commit, cela permettra de g\u00e9n\u00e9rer automatiquement les notes de version.</li> <li>Push vers la branche (<code>git push origin feature/AmazingFeature</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les pousser vers votre fork.</li> <li>Ouvrez une Pull Request vers la branche <code>stage</code>     Une fois que vous avez pouss\u00e9 vos modifications vers votre fork, vous pouvez ouvrir une Pull Request vers la branche <code>stage</code> du d\u00e9p\u00f4t principal.</li> <li>Apr\u00e8s la validation de votre Pull Request, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.     Une fois que votre Pull Request a \u00e9t\u00e9 valid\u00e9e, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.</li> </ol> <p>Note</p> <p>Assurez-vous de toujours mettre \u00e0 jour votre branche locale avec la branche <code>stage</code> avant de commencer \u00e0 travailler sur une nouvelle fonctionnalit\u00e9 pour vous assurer que vous travaillez avec la derni\u00e8re version du projet.</p>"},{"location":"fr/basalt-auth/contribution.html#notes-supplementaires","title":"Notes suppl\u00e9mentaires","text":"<p>Assurez-vous de tester toutes vos modifications et d'ajouter des tests lorsque cela est possible.  </p> <p>Soyez ouvert aux retours et aux suggestions sur votre pull request.</p>"},{"location":"fr/basalt-auth/contribution.html#remerciement","title":"Remerciement","text":"<p>Je vous remercie sinc\u00e8rement pour votre int\u00e9r\u00eat \u00e0 contribuer \u00e0 Basalt Auth. Votre aide est grandement appr\u00e9ci\u00e9e et contribue \u00e0 l'am\u00e9lioration du projet pour tous les utilisateurs.</p>"},{"location":"fr/basalt-auth/getting-started.html#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<p>Bienvenue dans le guide de d\u00e9marrage rapide de Basalt Auth !</p>"},{"location":"fr/basalt-auth/getting-started.html#installation","title":"Installation","text":"TypeScript <p>Basalt Auth est \u00e9crit en TypeScript et est livr\u00e9 avec des types TypeScript int\u00e9gr\u00e9s.</p> <p>Si vous utilisez TypeScript, vous n'avez pas besoin d'installer de types suppl\u00e9mentaires.</p> <p>Si vous utilisez JavaScript, vous pouvez ignorer les types TypeScript.</p> <p>Int\u00e9grer Basalt Auth dans votre projet est un jeu d'enfant.</p> <p>Package : @basalt-lab/basalt-auth</p> <p>Suivez ces \u00e9tapes pour l'ajouter \u00e0 votre projet :</p> <p>NPM: <pre><code>npm i @basalt-lab/basalt-auth\n</code></pre></p> <p>PNPM: <pre><code>pnpm i @basalt-lab/basalt-auth\n</code></pre></p> npm i @basalt-lab/basalt-authadded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>Vous \u00eates pr\u00eat \u00e0 commencer ! Bon d\u00e9veloppement \ud83d\ude80</p>"},{"location":"fr/basalt-auth/index.html","title":"Basalt Auth","text":"<p>Warning</p> <p>Basalt est actuellement \u00e0 ses d\u00e9buts, s'il vous pla\u00eet soyez indulgent et n'hesitez pas \u00e0 faire un retour sur votre exp\u00e9rience par mail : basalt-lab@proton.me.</p>"},{"location":"fr/basalt-auth/index.html#introduction","title":"Introduction","text":"<p>Basalt Auth est un module d'authentification bas\u00e9 sur des tokens, con\u00e7u pour \u00eatre simple \u00e0 utiliser.</p> <p>La particularit\u00e9 de Basalt Auth r\u00e9side dans son syst\u00e8me de paire de cl\u00e9s : chaque token est associ\u00e9 \u00e0 sa propre paire, une caract\u00e9ristique qui le diff\u00e9rencie des JWT standards.</p> <p>C'est un m\u00e9lange entre de l'OAT et des JWT, les tokens ainsi que les clefs publiques doivent \u00eatre stock\u00e9es c\u00f4t\u00e9 serveur pour \u00eatre v\u00e9rifi\u00e9es. Pour cela je conseille l'utilisation d'un store comme Redis ou DragonFly</p>"},{"location":"fr/basalt-auth/index.html#pourquoi-basalt-auth","title":"Pourquoi Basalt Auth ?","text":"<p>L'objectif derri\u00e8re Basalt Auth \u00e9tait de d\u00e9velopper un syst\u00e8me d'authentification personnalis\u00e9 qui s'inspire de la structure des JWT, mais avec quelques subtilit\u00e9s.</p> <p>Cette approche n'est pas n\u00e9cessairement sup\u00e9rieure aux m\u00e9thodes conventionnelles, c'est plut\u00f4t une exploration personnelle dans la conception de syst\u00e8mes d'authentification.</p> <p>Il est important de noter que la s\u00e9curit\u00e9 est une discipline \u00e9volutive, et les m\u00e9rites de cette structure par rapport aux standards \u00e9tablis n'ont pas \u00e9t\u00e9 pleinement \u00e9valu\u00e9s.</p> <p>Warning</p> <p>Basalt Auth ne cherche pas \u00e0 remplacer les solutions existantes, mais plut\u00f4t \u00e0 offrir une alternative pour des cas d'utilisation sp\u00e9cifiques.</p>"},{"location":"fr/basalt-auth/index.html#polyvalence-et-compatibilite","title":"Polyvalence et Compatibilit\u00e9","text":"<p>Basalt Auth est con\u00e7u pour \u00eatre utilis\u00e9 dans des contextes vari\u00e9s, que ce soit backend ou frontend. Sa nature ind\u00e9pendante facilite son incorporation dans diff\u00e9rents projets, sans n\u00e9cessiter de composants externes sp\u00e9cifiques.</p>"},{"location":"fr/basalt-auth/references.html","title":"R\u00e9f\u00e9rences","text":"<p>Vous pouvez retrouver les r\u00e9f\u00e9rences de la librairie ici \u27a1\ufe0f https://basalt-lab.github.io/basalt-auth/.</p>"},{"location":"fr/basalt-auth/example/authentication.html#signature-dun-token","title":"Signature d'un token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiZDk4MTcwMjgtM2EzZS00YWYyLTgwNzYtOTExZGFlZThiMGIzIiwiZXhwIjoiMjAyNC0wMy0yMlQxMjowOTo0MS4yNThaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.e30=.PJpP4zbxX4SaYD7hIj0wZGIqhSs8SbGdJ0W+o/Pr6WJyOhJTvRsIqQpf8sCvTFWWGyCx5ZGeczT0E1RHBE7GBg=="},{"location":"fr/basalt-auth/example/authentication.html#signature-dun-token-avec-payload","title":"Signature d'un token avec payload","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({\n    usename: 'User1',\n});\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({\n    usename: 'User1',\n});\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiMzAzNjQ2ODMtYWYxMC00NjcyLTkwNTQtMmY2YWNmM2E1ZGNlIiwiZXhwIjoiMjAyNC0wMy0yMlQxMjoxMjo1NS41NjlaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.eyJ1c2VuYW1lIjoiVXNlcjEifQ==.heBWyPtSqmwR/FTShaeqBm7NtCxxE2/faIRc1vQG80mMwOlTTzeWcPD8iNecwtkij/GW6RlEADex4uxCjULFAw=="},{"location":"fr/basalt-auth/example/authentication.html#signature-dun-token-avec-un-temps-dexpiration","title":"Signature d'un token avec un temps d'expiration","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, BasaltTokenExpiry } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\n// you can use enum or number (default is 1 hour)\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({}, BasaltTokenExpiry.ONE_DAY);\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\n// you can use enum or number (default is 1 hour)\nconst tokenSignResult = basaltToken.sign({}, BasaltTokenExpiry.ONE_DAY);\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiZTg5YjYzYTAtMjY0NS00ZjQwLWE5YzYtOGM1Yzg0NmIwNzNlIiwiZXhwIjoiMjAyNC0wMy0yM1QxMToxMDoyMC43NjVaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.e30=.8f72CeURHH/lYENBqozW1PsmVAr3RLHtBm6hbk/TY1VoamD4WYm1TakCdVQhlUVCL3nYRaFzyQ8zhuS5b3vlCg=="},{"location":"fr/basalt-auth/example/authentication.html#signature-dun-token-issuer-et-audience","title":"Signature d'un token Issuer et Audience","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, BasaltTokenExpiry } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\n// default issuer is 'Basalt-Issuer' and default audience is 'Basalt-Audience'\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign(\n    {}, BasaltTokenExpiry.ONE_HOUR, 'Basalt-issuer', 'Basalt-audience'\n);\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\n// default issuer is 'Basalt-Issuer' and default audience is 'Basalt-Audience'\nconst tokenSignResult = basaltToken.sign(\n    {}, BasaltTokenExpiry.ONE_HOUR, 'Basalt-issuer', 'Basalt-audience'\n);\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiNzBmYTFiZDEtOWEwNy00Mzk5LWI4Y2YtZTg3ZTNkNDVhNzU2IiwiZXhwIjoiMjAyNC0wMy0yMlQxMjoxMTozOS4zNDZaIiwiaXNzdWVyIjoiQmFzYWx0LWlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LWF1ZGllbmNlIn0=.e30=.3teaXCzVkSLI5+1Hr84le4l9FqqZFjLeHAYGqSDOzK9453tI276ysihygMA5oq8aabYSl4/Fn6Hm5T/p+88ZDQ=="},{"location":"fr/basalt-auth/example/authentication.html#verification-dun-token","title":"V\u00e9rification d'un token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\ntry {\n    basaltToken.verify(tokenSignResult.token, tokenSignResult.publicKey)\n    console.log('Token is valid');\n} catch (error) {\n    console.error(error);\n}\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\ntry {\n    basaltToken.verify(tokenSignResult.token, tokenSignResult.publicKey)\n    console.log('Token is valid');\n} catch (error) {\n    console.error(error);\n}\n</code></pre> node example.jsToken is valid"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-de-luuid-du-token","title":"R\u00e9cup\u00e9ration de l'uuid du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getTokenUuid(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getTokenUuid(tokenSignResult.token));\n</code></pre> node example.jsc4a198c4-2717-470d-886f-bc2921badd8f"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-de-lexpiration","title":"Recup\u00e9ration de l'expiration","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getExpirationDate(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getExpirationDate(tokenSignResult.token));\n</code></pre> node example.js2024-03-22T12:03:38.266Z"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-de-laudiance-du-token","title":"R\u00e9cup\u00e9ration de l'audiance du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getAudience(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getAudience(tokenSignResult.token));\n</code></pre> node example.jsBasalt-Audience"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-de-lemetteur-du-token","title":"R\u00e9cup\u00e9ration de l'\u00e9metteur du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getIssuer(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getIssuer(tokenSignResult.token));\n</code></pre> node example.jsBasalt-Issuer"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-du-header-du-token","title":"R\u00e9cup\u00e9ration du header du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, type IBasaltTokenHeader } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconst tokenHeader: IBasaltTokenHeader = basaltToken.getHeader(tokenSignResult.token);\nconsole.log(tokenHeader);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconst tokenHeader = basaltToken.getHeader(tokenSignResult.token);\nconsole.log(tokenHeader);\n</code></pre> node example.js{  uuid: '82e7fa41-44b4-4fa8-ac31-ae309234bb8b',  exp: '2024-03-22T12:19:58.187Z',  issuer: 'Basalt-Audience',  audience: 'Basalt-Audience'}"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-du-payload-du-token","title":"R\u00e9cup\u00e9ration du payload du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({\n    username: 'user1'\n});\nconst tokenPayload: { username: string } = basaltToken.getPayload(tokenSignResult.token);\nconsole.log(tokenPayload);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({\n    username: 'user1'\n});\nconst tokenPayload = basaltToken.getPayload(tokenSignResult.token);\nconsole.log(tokenPayload);\n</code></pre> node example.js{ username: 'user1' }"},{"location":"fr/basalt-auth/example/authentication.html#verifier-si-le-token-a-expire","title":"V\u00e9rifier si le token a expir\u00e9","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\nconsole.log(basaltToken.isExpired(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\nconsole.log(basaltToken.isExpired(tokenSignResult.token));\n</code></pre> node example.jsfalse"},{"location":"fr/basalt-helper/contribution.html","title":"Contribuer \u00e0 Basalt Helper","text":""},{"location":"fr/basalt-helper/contribution.html#introduction","title":"Introduction","text":"<p>Si vous souhaiter contribuer \u00e0 Basalt Helper, ce serait avec plaisir !</p> <p>Les \u00e9tapes suivantes vous guideront \u00e0 travers le processus de contribution, en vous aidant \u00e0 comprendre comment vous pouvez apporter votre aide au projet.</p>"},{"location":"fr/basalt-helper/contribution.html#processus-de-contribution","title":"Processus de contribution","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork le projet    Commencez par cr\u00e9er un fork du d\u00e9p\u00f4t sur GitHub. Cela vous aidera \u00e0 cr\u00e9er votre propre copie du projet sur votre compte, vous permettant d'y apporter des modifications librement.</li> <li>Cr\u00e9ez votre branche de fonctionnalit\u00e9 (<code>git checkout -b feature/AmazingFeature</code>)     Cr\u00e9ez une nouvelle branche pour travailler sur votre fonctionnalit\u00e9 \u00e0 partir de la branche <code>stage</code>.</li> <li>Committez vos changements (<code>git commit -m 'feat: Add some AmazingFeature'</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les commiter et les pr\u00e9parer pour le push.     Veuillez utiliser des conventionnal commits pour vos messages de commit, cela permettra de g\u00e9n\u00e9rer automatiquement les notes de version.</li> <li>Push vers la branche (<code>git push origin feature/AmazingFeature</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les pousser vers votre fork.</li> <li>Ouvrez une Pull Request vers la branche <code>stage</code>     Une fois que vous avez pouss\u00e9 vos modifications vers votre fork, vous pouvez ouvrir une Pull Request vers la branche <code>stage</code> du d\u00e9p\u00f4t principal.</li> <li>Apr\u00e8s la validation de votre Pull Request, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.     Une fois que votre Pull Request a \u00e9t\u00e9 valid\u00e9e, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.</li> </ol> <p>Note</p> <p>Assurez-vous de toujours mettre \u00e0 jour votre branche locale avec la branche <code>stage</code> avant de commencer \u00e0 travailler sur une nouvelle fonctionnalit\u00e9 pour vous assurer que vous travaillez avec la derni\u00e8re version du projet.</p>"},{"location":"fr/basalt-helper/contribution.html#notes-supplementaires","title":"Notes suppl\u00e9mentaires","text":"<p>Assurez-vous de tester toutes vos modifications et d'ajouter des tests lorsque cela est possible.  </p> <p>Soyez ouvert aux retours et aux suggestions sur votre pull request.</p>"},{"location":"fr/basalt-helper/contribution.html#remerciement","title":"Remerciement","text":"<p>Je vous remercie sinc\u00e8rement pour votre int\u00e9r\u00eat \u00e0 contribuer \u00e0 Basalt Helper. Votre aide est grandement appr\u00e9ci\u00e9e et contribue \u00e0 l'am\u00e9lioration du projet pour tous les utilisateurs.</p>"},{"location":"fr/basalt-helper/getting-started.html#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<p>Bienvenue dans le guide de d\u00e9marrage rapide de Basalt Helper !</p>"},{"location":"fr/basalt-helper/getting-started.html#installation","title":"Installation","text":"TypeScript <p>Basalt Helper est \u00e9crit en TypeScript et est livr\u00e9 avec des types TypeScript int\u00e9gr\u00e9s.</p> <p>Si vous utilisez TypeScript, vous n'avez pas besoin d'installer de types suppl\u00e9mentaires.</p> <p>Si vous utilisez JavaScript, vous pouvez ignorer les types TypeScript.</p> <p>Int\u00e9grer Basalt Helper dans votre projet est un jeu d'enfant.</p> <p>Package : @basalt-lab/basalt-helper</p> <p>Suivez ces \u00e9tapes pour l'ajouter \u00e0 votre projet :</p> <p>NPM: <pre><code>npm i @basalt-lab/basalt-helper\n</code></pre></p> <p>PNPM: <pre><code>pnpm i @basalt-lab/basalt-helper\n</code></pre></p> npm i @basalt-lab/basalt-helperadded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>Vous \u00eates pr\u00eat \u00e0 commencer ! Bon d\u00e9veloppement \ud83d\ude80</p>"},{"location":"fr/basalt-helper/index.html","title":"Basalt Helper","text":"<p>Warning</p> <p>Basalt est actuellement \u00e0 ses d\u00e9buts, s'il vous pla\u00eet soyez indulgent et n'hesitez pas \u00e0 faire un retour sur votre exp\u00e9rience par mail : basalt-lab@proton.me.</p>"},{"location":"fr/basalt-helper/index.html#introduction","title":"Introduction","text":"<p>Basalt Helper est un package utilitaire con\u00e7u pour simplifier le d\u00e9veloppement en Node.js.</p> <p>Il fournit plusieurs outils qui se veut simple d'utilisation et efficace, permettant aux d\u00e9veloppeurs de gagner du temps et de se concentrer sur la logique m\u00e9tier de leurs applications en \u00e9vitant les tracas des t\u00e2ches courantes.</p>"},{"location":"fr/basalt-helper/index.html#pourquoi-basalt-helper","title":"Pourquoi Basalt Helper ?","text":"<p>Le choix de Basalt Helper s'explique par sa simplicit\u00e9 et son efficacit\u00e9.</p> <p>Il est con\u00e7u pour \u00eatre facile \u00e0 int\u00e9grer dans n'importe quel projet Node.js, offrant une vari\u00e9t\u00e9 d'outils pour simplifier les t\u00e2ches de d\u00e9veloppement courantes.</p> <p>Il va continuer \u00e0 \u00e9voluer et proposer de nouvelles fonctionnalit\u00e9s, tout en restant le plus simple possible pour les d\u00e9veloppeurs.</p>"},{"location":"fr/basalt-helper/references.html","title":"R\u00e9f\u00e9rences","text":"<p>Vous pouvez retrouver les r\u00e9f\u00e9rences de la librairie ici \u27a1\ufe0f https://basalt-lab.github.io/basalt-helper/.</p>"},{"location":"fr/basalt-helper/example/data/deep-clone.html#clonage-profond","title":"Clonage profond","text":"TypeScriptJavaScript <pre><code>import { deepClone } from '@basalt-lab/basalt-helper';\n\nconst data1: { test: { test: string } } = {\n    test: {\n        test: 'test'\n    }\n};\nconst data2: number[][] = [[1, 2, 3], [4, 5, 6]];\nconst data3: { test: { test: number[] } } = {\n    test: {\n        test: [1, 2, 3]\n    }\n};\nconst data4: ({ test: number[] })[] = [\n    {\n        test: [1, 2, 3]\n    },\n    {\n        test: [4, 5, 6]\n    }\n];\n\nconst clonedData1: { test: { test: string } } = deepClone(data1);\nconst clonedData2: number[][] = deepClone(data2);\nconst clonedData3: { test: { test: number[] } } = deepClone(data3);\nconst clonedData4: ({ test: number[] })[] = deepClone(data4);\n\nconsole.log(clonedData1 === data1);\nconsole.log(clonedData2 === data2);\nconsole.log(clonedData3 === data3);\nconsole.log(clonedData4 === data4);\n</code></pre> <pre><code>const { deepClone } = require('@basalt-lab/basalt-helper');\n\nconst data1 = {\n    test: {\n        test: 'test'\n    }\n};\nconst data2 = [[1, 2, 3], [4, 5, 6]];\nconst data3 = {\n    test: {\n        test: [1, 2, 3]\n    }\n};\nconst data4 = [\n    {\n        test: [1, 2, 3]\n    },\n    {\n        test: [4, 5, 6]\n    }\n];\n\nconst clonedData1 = deepClone(data1);\nconst clonedData2 = deepClone(data2);\nconst clonedData3 = deepClone(data3);\nconst clonedData4 = deepClone(data4);\n\nconsole.log(clonedData1 === data1);\n</code></pre> node example.jsfalsefalsefalsefalse"},{"location":"fr/basalt-helper/example/data/filter.html#inclure-uniquement-certaines-cles","title":"Inclure uniquement certaines cl\u00e9s","text":"TypeScriptJavaScript <pre><code>import { filterByKeyInclusion } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByKeyInclusion(data, ['a', 'b', 'c']);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByKeyInclusion } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByKeyInclusion(data, ['a', 'b', 'c']);\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a', b: 'b', c: 'c' }"},{"location":"fr/basalt-helper/example/data/filter.html#inclure-uniquement-certaines-cles-et-seulement-si-elles-ont-une-valeur","title":"Inclure uniquement certaines cl\u00e9s et seulement si elles ont une valeur","text":"TypeScriptJavaScript <pre><code>import { filterByKeyInclusion } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: undefined; c: null; d: string } = {\n    a: 'a',\n    b: undefined,\n    c: null,\n    d: 'd',\n};\n\nconst filteredData = filterByKeyInclusion(data, ['a', 'b', 'c'], true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByKeyInclusion } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: undefined,\n    c: null,\n    d: 'd',\n};\n\nconst filteredData = filterByKeyInclusion(data, ['a', 'b', 'c'], true);\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a' }"},{"location":"fr/basalt-helper/example/data/filter.html#exclure-certaines-cles","title":"Exclure certaines cl\u00e9s","text":"TypeScriptJavaScript <pre><code>import { filterByKeyExclusion } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByKeyExclusion(data, ['a', 'b']);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByKeyExclusion } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByKeyExclusion(data, ['a', 'b']);\nconsole.log(filteredData);\n</code></pre> node example.js{ c: 'c', d: 'd' }"},{"location":"fr/basalt-helper/example/data/filter.html#exclure-certaines-cles-et-exclure-ceux-qui-nont-pas-de-valeur","title":"Exclure certaines cl\u00e9s et exclure ceux qui n'ont pas de valeur","text":"TypeScriptJavaScript <pre><code>import { filterByKeyExclusion } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: null; c: undefined; d: string } = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = filterByKeyExclusion(data, ['a'], true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByKeyExclusion } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = filterByKeyExclusion(data, ['a'], true);\nconsole.log(filteredData);\n</code></pre> node example.js{ d: 'd' }"},{"location":"fr/basalt-helper/example/data/filter.html#inclure-les-clefs-selon-un-pattern","title":"Inclure les clefs selon un pattern","text":"TypeScriptJavaScript <pre><code>import { filterByValue } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value: string): boolean =&gt; value === 'a' || value === 'b');\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByValue } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value) =&gt; value === 'a' || value === 'b');\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a', b: 'b' }"},{"location":"fr/basalt-helper/example/data/filter.html#exclure-les-clefs-selon-un-pattern","title":"Exclure les clefs selon un pattern","text":"TypeScriptJavaScript <pre><code>import { filterByValue } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value: string): boolean =&gt; value !== 'a' &amp;&amp; value !== 'b');\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByValue } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value) =&gt; value !== 'a' &amp;&amp; value !== 'b');\nconsole.log(filteredData);\n</code></pre> node example.js{ c: 'c', d: 'd' }"},{"location":"fr/basalt-helper/example/data/filter.html#exclure-les-clefs-selon-un-pattern-et-exclure-ceux-qui-nont-pas-de-valeur","title":"Exclure les clefs selon un pattern et exclure ceux qui n'ont pas de valeur","text":"TypeScriptJavaScript <pre><code>import { filterByValue } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: null; c: undefined; d: string } = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value: unknown): boolean =&gt; value !== 'a', true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { filterByValue } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = filterByValue(data, (value) =&gt; value !== 'a', true);\nconsole.log(filteredData);\n</code></pre> node example.js{ d: 'd' }"},{"location":"fr/basalt-helper/example/data/transform.html#transformation-des-cles-dun-objet-en-camelcase","title":"Transformation des cl\u00e9s d'un objet en camelCase","text":"TypeScriptJavaScript <pre><code>import { transformKeys, BasaltCamelCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltCamelCaseTransformer()));\n</code></pre> <pre><code>const { transformKeys, BasaltCamelCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltCamelCaseTransformer()));\n</code></pre> node example.js{  camelCase: undefined,  pascalCase: undefined,  kebabCase: undefined,  snakeCase: undefined}"},{"location":"fr/basalt-helper/example/data/transform.html#transformation-des-cles-dun-objet-en-pascalcase","title":"Transformation des cl\u00e9s d'un objet en PascalCase","text":"TypeScriptJavaScript <pre><code>import { transformKeys, BasaltPascalCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltPascalCaseTransformer()));\n</code></pre> <pre><code>const { transformKeys, BasaltPascalCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltPascalCaseTransformer()));\n</code></pre> node example.js{  CamelCase: undefined,  PascalCase: undefined,  KebabCase: undefined,  SnakeCase: undefined}"},{"location":"fr/basalt-helper/example/data/transform.html#transformation-des-cles-dun-objet-en-kebab-case","title":"Transformation des cl\u00e9s d'un objet en kebab-case","text":"TypeScriptJavaScript <pre><code>import { transformKeys, BasaltKebabCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltKebabCaseTransformer()));\n</code></pre> <pre><code>const { transformKeys, BasaltKebabCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltKebabCaseTransformer()));\n</code></pre> node example.js{  'camel-case': undefined,  'pascal-case': undefined,  'kebab-case': undefined,  'snake-case': undefined}"},{"location":"fr/basalt-helper/example/data/transform.html#transformation-des-cles-dun-objet-en-snake_case","title":"Transformation des cl\u00e9s d'un objet en snake_case","text":"TypeScriptJavaScript <pre><code>import { transformKeys, BasaltSnakeCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltSnakeCaseTransformer()));\n</code></pre> <pre><code>const { transformKeys, BasaltSnakeCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(transformKeys(data, new BasaltSnakeCaseTransformer()));\n</code></pre> node example.js{  camel_case: undefined,  pascal_case: undefined,  kebab_case: undefined,  snake_case: undefined}"},{"location":"fr/basalt-helper/example/security/password.html#hasher-un-mot-de-passe","title":"Hasher un mot de passe","text":"TypeScriptJavaScript <pre><code>import { BasaltPassword } from '@basalt-lab/basalt-core';\n\nconst main = async (): Promise&lt;void&gt; =&gt; {\n    const password: string = 'password';\n    const hashedPassword: string = await BasaltPassword.hashPassword(password);\n    console.log(hashedPassword);\n};\nmain();\n</code></pre> <pre><code>const { BasaltPassword } = require('@basalt-lab/basalt-core');\n\nconst main = async () =&gt; {\n    const password = 'password';\n    const hashedPassword = await BasaltPassword.hashPassword(password);\n    console.log(hashedPassword);\n};\nmain();\n</code></pre> node example.js$argon2id$v=19$m=65536,t=3,p=20$W1Qv4XJ+jaVDI04sLFukTYXI/7FYuyeavMLNUXnnrPQ$JfQgEbewRGjjGIpGEIDp/vIqeX7avK2DqYIddilsqng"},{"location":"fr/basalt-helper/example/security/password.html#verifier-un-mot-de-passe","title":"V\u00e9rifier un mot de passe","text":"TypeScriptJavaScript <pre><code>import { BasaltPassword } from '@basalt-lab/basalt-core';\n\nconst main = async (): Promise&lt;void&gt; =&gt; {\n    const password: string = 'password';\n    const hashedPassword: string = await BasaltPassword.hashPassword(password);\n    const isPasswordValid: boolean = await BasaltPassword.verifyPassword(password, hashedPassword);\n    console.log(isPasswordValid);\n};\nmain();\n</code></pre> <pre><code>const { BasaltPassword } = require('@basalt-lab/basalt-core');\n\nconst main = async () =&gt; {\n    const password = 'password';\n    const hashedPassword = await BasaltPassword.hashPassword(password);\n    const isPasswordValid = await BasaltPassword.verifyPassword(password, hashedPassword);\n    console.log(isPasswordValid);\n};\nmain();\n</code></pre> node example.jstrue"},{"location":"fr/basalt-logger/contribution.html","title":"Contribuer \u00e0 Basalt Logger","text":""},{"location":"fr/basalt-logger/contribution.html#introduction","title":"Introduction","text":"<p>Si vous souhaiter contribuer \u00e0 Basalt Logger, ce serait avec plaisir !</p> <p>Les \u00e9tapes suivantes vous guideront \u00e0 travers le processus de contribution, en vous aidant \u00e0 comprendre comment vous pouvez apporter votre aide au projet.</p>"},{"location":"fr/basalt-logger/contribution.html#processus-de-contribution","title":"Processus de contribution","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork le projet    Commencez par cr\u00e9er un fork du d\u00e9p\u00f4t sur GitHub. Cela vous aidera \u00e0 cr\u00e9er votre propre copie du projet sur votre compte, vous permettant d'y apporter des modifications librement.</li> <li>Cr\u00e9ez votre branche de fonctionnalit\u00e9 (<code>git checkout -b feature/AmazingFeature</code>)     Cr\u00e9ez une nouvelle branche pour travailler sur votre fonctionnalit\u00e9 \u00e0 partir de la branche <code>stage</code>.</li> <li>Committez vos changements (<code>git commit -m 'feat: Add some AmazingFeature'</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les commiter et les pr\u00e9parer pour le push.     Veuillez utiliser des conventionnal commits pour vos messages de commit, cela permettra de g\u00e9n\u00e9rer automatiquement les notes de version.</li> <li>Push vers la branche (<code>git push origin feature/AmazingFeature</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les pousser vers votre fork.</li> <li>Ouvrez une Pull Request vers la branche <code>stage</code>     Une fois que vous avez pouss\u00e9 vos modifications vers votre fork, vous pouvez ouvrir une Pull Request vers la branche <code>stage</code> du d\u00e9p\u00f4t principal.</li> <li>Apr\u00e8s la validation de votre Pull Request, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.     Une fois que votre Pull Request a \u00e9t\u00e9 valid\u00e9e, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.</li> </ol> <p>Note</p> <p>Assurez-vous de toujours mettre \u00e0 jour votre branche locale avec la branche <code>stage</code> avant de commencer \u00e0 travailler sur une nouvelle fonctionnalit\u00e9 pour vous assurer que vous travaillez avec la derni\u00e8re version du projet.</p>"},{"location":"fr/basalt-logger/contribution.html#notes-supplementaires","title":"Notes suppl\u00e9mentaires","text":"<p>Assurez-vous de tester toutes vos modifications et d'ajouter des tests lorsque cela est possible.  </p> <p>Soyez ouvert aux retours et aux suggestions sur votre pull request.</p>"},{"location":"fr/basalt-logger/contribution.html#remerciement","title":"Remerciement","text":"<p>Je vous remercie sinc\u00e8rement pour votre int\u00e9r\u00eat \u00e0 contribuer \u00e0 Basalt Logger. Votre aide est grandement appr\u00e9ci\u00e9e et contribue \u00e0 l'am\u00e9lioration du projet pour tous les utilisateurs.</p>"},{"location":"fr/basalt-logger/getting-started.html#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<p>Bienvenue dans le guide de d\u00e9marrage rapide de Basalt Logger !</p>"},{"location":"fr/basalt-logger/getting-started.html#installation","title":"Installation","text":"TypeScript <p>Basalt Logger est \u00e9crit en TypeScript et est livr\u00e9 avec des types TypeScript int\u00e9gr\u00e9s.</p> <p>Si vous utilisez TypeScript, vous n'avez pas besoin d'installer de types suppl\u00e9mentaires.</p> <p>Si vous utilisez JavaScript, vous pouvez ignorer les types TypeScript.</p> <p>Int\u00e9grer Basalt Logger dans votre projet est un jeu d'enfant.</p> <p>Package : @basalt-lab/basalt-logger</p> <p>Suivez ces \u00e9tapes pour l'ajouter \u00e0 votre projet :</p> <p>NPM: <pre><code>npm i @basalt-lab/basalt-logger\n</code></pre></p> <p>PNPM: <pre><code>pnpm i @basalt-lab/basalt-logger\n</code></pre></p> npm i @basalt-lab/basalt-loggeradded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>Vous \u00eates pr\u00eat \u00e0 commencer ! Bon d\u00e9veloppement \ud83d\ude80</p>"},{"location":"fr/basalt-logger/index.html","title":"Basalt Logger","text":"<p>Warning</p> <p>Basalt est actuellement \u00e0 ses d\u00e9buts, s'il vous pla\u00eet soyez indulgent et n'hesitez pas \u00e0 faire un retour sur votre exp\u00e9rience par mail : basalt-lab@proton.me.</p>"},{"location":"fr/basalt-logger/index.html#introduction","title":"Introduction","text":"<p>Basalt Logger est une biblioth\u00e8que de logging flexible et robuste pour TypeScript/JavaScript, con\u00e7ue pour une utilisation facile et intuitive dans divers environnements de d\u00e9veloppement. Gr\u00e2ce \u00e0 sa structure modulaire et ses strat\u00e9gies de logging extensibles, Basalt Logger s'adapte parfaitement \u00e0 tout projet n\u00e9cessitant une journalisation d\u00e9taill\u00e9e et personnalisable.</p> <p>La facilit\u00e9 d'int\u00e9gration de Basalt Logger dans vos applications TypeScript/JavaScript vous permet d'enrichir vos projets avec un syst\u00e8me de journalisation puissant sans alourdir votre code.</p>"},{"location":"fr/basalt-logger/index.html#pourquoi-basalt-logger","title":"Pourquoi Basalt Logger ?","text":"<ul> <li>Polyvalence: Adaptable \u00e0 divers environnements et exigences, gr\u00e2ce \u00e0 son architecture flexible.</li> <li>Extensibilit\u00e9: Permet l'ajout de strat\u00e9gies de logging personnalis\u00e9es, telles que la journalisation dans la console ou dans des fichiers. Vous pouvez \u00e9galement cr\u00e9er vos propres strat\u00e9gies de logging pour r\u00e9pondre \u00e0 des besoins sp\u00e9cifiques.</li> <li>Facilit\u00e9 d'utilisation: Con\u00e7ue pour \u00eatre intuitive, avec une API simple et des exemples de code pour une mise en route rapide.</li> <li>Performance et Non-Bloquant: Con\u00e7u pour \u00eatre l\u00e9ger et efficace, Basalt Logger assure une journalisation rapide et non bloquante, minimisant ainsi l'impact sur les performances de l'application.</li> </ul>"},{"location":"fr/basalt-logger/references.html","title":"R\u00e9f\u00e9rences","text":"<p>Vous pouvez retrouver les r\u00e9f\u00e9rences de la librairie ici \u27a1\ufe0f https://basalt-lab.github.io/basalt-logger/.</p>"},{"location":"fr/basalt-logger/example/logger.html#ajout-dune-strategie-de-log","title":"Ajout d'une strategie de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.log('hello world');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.log('hello world');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : hello world"},{"location":"fr/basalt-logger/example/logger.html#suppression-dune-strategie-specifique-de-log","title":"Suppression d'une strategie specifique de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.removeStrategy('console');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.removeStrategy('console');\n</code></pre>"},{"location":"fr/basalt-logger/example/logger.html#suppression-de-toutes-les-strategies-de-log","title":"Suppression de toutes les strategies de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.clearStrategies();\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.clearStrategies();\n</code></pre>"},{"location":"fr/basalt-logger/example/logger.html#creation-dune-strategie-de-log","title":"Cr\u00e9ation d'une strategie de log","text":"TypeScriptJavaScript <pre><code>import { appendFileSync } from 'fs';\nimport { BasaltLogger, ILoggerStrategy, LogLevels}  from '@basalt-lab/basalt-logger';\n\nclass FileLoggerStrategy implements ILoggerStrategy {\n    public log(level: LogLevels, date: Date, object: unknown): void {\n        const prefixDate: string = `[${date.toISOString().replace(/T/, ' ').replace(/\\..+/, '')}]`;\n        const sanitizedObject: string = typeof object === 'string' ? object : JSON.stringify(object);\n        const message: string = `${prefixDate} ${level} : ${sanitizedObject}`;\n        appendFile('./test.log', `${message}\\n`, (err): void =&gt; {\n            if (err) throw err;\n        });\n    }\n}\nBasaltLogger.addStrategy('file', new FileLoggerStrategy());\nBasaltLogger.log('Hello World');\n</code></pre> <pre><code>const { appendFileSync } = require('fs');\nconst { BasaltLogger, LogLevels } = require('@basalt-lab/basalt-logger');\n\nclass FileLoggerStrategy {\n    log(level, date, object) {\n        const prefixDate = `[${date.toISOString().replace(/T/, ' ').replace(/\\..+/, '')}]`;\n        const sanitizedObject = typeof object === 'string' ? object : JSON.stringify(object);\n        const message = `${prefixDate} ${level} : ${sanitizedObject}`;\n        appendFile('./test.log', `${message}\\n`, (err) =&gt; {\n            if (err) throw err;\n        });\n    }\n}\nBasaltLogger.addStrategy('file', new FileLoggerStrategy());\nBasaltLogger.log('Hello World');\n</code></pre> node example.jscat test.log[2023-11-21 00:00:00] LOG : Hello World"},{"location":"fr/basalt-logger/example/logger.html#ajout-de-plusieurs-strategies-de-log","title":"Ajout de plusieurs strategies de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy}  from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nBasaltLogger.log('Hello World');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nBasaltLogger.log('Hello World');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : Hello Worldcat log.txt[2023-11-21 00:00:00] LOG : Hello World"},{"location":"fr/basalt-logger/example/logger.html#tout-les-niveaux-de-log","title":"Tout les niveaux de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy }  from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.log('hello world');\nBasaltLogger.info('hello world');\nBasaltLogger.debug('hello world');\nBasaltLogger.warn('hello world');\nBasaltLogger.error('hello world');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nBasaltLogger.log('hello world');\nBasaltLogger.info('hello world');\nBasaltLogger.debug('hello world');\nBasaltLogger.warn('hello world');\nBasaltLogger.error('hello world');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : hello world[2023-11-21 00:00:00] INFO : hello world[2023-11-21 00:00:00] DEBUG : hello world[2023-11-21 00:00:00] WARN : hello world[2023-11-21 00:00:00] ERROR : hello world"},{"location":"fr/basalt-logger/example/logger.html#log-sur-une-strategie-specifique","title":"Log sur une strategie specifique","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy}  from '@basalt-lab/basalt-logger';\n\nBasaltLogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nBasaltLogger.log('console strategy', ['console']);\nBasaltLogger.log('file strategy', ['file']);\nBasaltLogger.log('console and file strategy', ['console', 'file']);\nBasaltLogger.log('all strategies');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nBasaltLogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nBasaltLogger.log('console strategy', ['console']);\nBasaltLogger.log('file strategy', ['file']);\nBasaltLogger.log('console and file strategy', ['console', 'file']);\nBasaltLogger.log('all strategies');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : console strategy[2023-11-21 00:00:00] LOG : console and file strategy[2023-11-21 00:00:00] LOG : all strategiescat log.txt[2023-11-21 00:00:00] LOG : file strategy[2023-11-21 00:00:00 LOG : console and file strategy[2023-11-21 00:00:00 LOG : all strategies"}]}