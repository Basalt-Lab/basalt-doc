var __index = {"config":{"lang":["en","fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"fr/index.html","title":"Basalt","text":""},{"location":"fr/index.html#introduction","title":"Introduction","text":"<p>Bienvenue dans la documentation de Basalt.</p> <p>Basalt est une suite de packages sp\u00e9cialement con\u00e7ue pour le d\u00e9veloppement en Node.js et d\u00e9velopp\u00e9e en TypeScript et en ESM.</p> <p>Chaque module de Basalt vise \u00e0 fournir des outils efficaces et faciles \u00e0 utiliser.</p> Attention <p>Basalt est actuellement en d\u00e9veloppement, et est sujet \u00e0 des changements fr\u00e9quents. Tous les packages ne sont pas encore disponibles, et seuls certains modules de base sont op\u00e9rationnels \u00e0 ce jour.</p> <p>La documentation et les fonctionnalit\u00e9s continueront d'\u00e9voluer.</p> <p>Le d\u00e9veloppement de Basalt avance peu \u00e0 peu, je travail sur plusieurs projets en parall\u00e8le, je fais donc au mieux avec le temps que je dispose.</p> <p>Il est actuellement recommand\u00e9 pour des projets exp\u00e9rimentaux ou non critiques.</p> <p>N'h\u00e9sitez pas \u00e0 me contacter pour toute question ou suggestion ou m\u00eame si vous souhaitez rapporter un bug.</p>"},{"location":"fr/index.html#contact","title":"Contact","text":"<p>Vous pouvez me contacter sur : basalt-lab@proton.me ou sur Discord : <code>necrelox</code></p> <p>Note</p> <p>Si vous voyez des erreurs, j'en suis vraiment d\u00e9sol\u00e9 je fais de mon mieux c'est la premi\u00e8re fois que je fais \u00e7a. N'h\u00e9sitez pas si vous souhait\u00e9 discuter ou participer \u00e0 ce projet, je suis ouvert \u00e0 toute proposition.</p>"},{"location":"fr/basalt-auth/contribution.html","title":"Contribuer \u00e0 Basalt Auth","text":""},{"location":"fr/basalt-auth/contribution.html#introduction","title":"Introduction","text":"<p>Si vous souhaiter contribuer \u00e0 Basalt Auth, ce serait avec plaisir !</p> <p>Les \u00e9tapes suivantes vous guideront \u00e0 travers le processus de contribution, en vous aidant \u00e0 comprendre comment vous pouvez apporter votre aide au projet.</p>"},{"location":"fr/basalt-auth/contribution.html#processus-de-contribution","title":"Processus de contribution","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork le projet    Commencez par cr\u00e9er un fork du d\u00e9p\u00f4t sur GitHub. Cela vous aidera \u00e0 cr\u00e9er votre propre copie du projet sur votre compte, vous permettant d'y apporter des modifications librement.</li> <li>Cr\u00e9ez votre branche de fonctionnalit\u00e9 (<code>git checkout -b feature/AmazingFeature</code>)     Cr\u00e9ez une nouvelle branche pour travailler sur votre fonctionnalit\u00e9 \u00e0 partir de la branche <code>stage</code>.</li> <li>Committez vos changements (<code>git commit -m 'feat: Add some AmazingFeature'</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les commiter et les pr\u00e9parer pour le push.     Veuillez utiliser des conventionnal commits pour vos messages de commit, cela permettra de g\u00e9n\u00e9rer automatiquement les notes de version.</li> <li>Push vers la branche (<code>git push origin feature/AmazingFeature</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les pousser vers votre fork.</li> <li>Ouvrez une Pull Request vers la branche <code>stage</code>     Une fois que vous avez pouss\u00e9 vos modifications vers votre fork, vous pouvez ouvrir une Pull Request vers la branche <code>stage</code> du d\u00e9p\u00f4t principal.</li> <li>Apr\u00e8s la validation de votre Pull Request, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.     Une fois que votre Pull Request a \u00e9t\u00e9 valid\u00e9e, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.</li> </ol> <p>Note</p> <p>Assurez-vous de toujours mettre \u00e0 jour votre branche locale avec la branche <code>stage</code> avant de commencer \u00e0 travailler sur une nouvelle fonctionnalit\u00e9 pour vous assurer que vous travaillez avec la derni\u00e8re version du projet.</p>"},{"location":"fr/basalt-auth/contribution.html#notes-supplementaires","title":"Notes suppl\u00e9mentaires","text":"<p>Assurez-vous de tester toutes vos modifications et d'ajouter des tests lorsque cela est possible.  </p> <p>Soyez ouvert aux retours et aux suggestions sur votre pull request.</p>"},{"location":"fr/basalt-auth/contribution.html#remerciement","title":"Remerciement","text":"<p>Je vous remercie sinc\u00e8rement pour votre int\u00e9r\u00eat \u00e0 contribuer \u00e0 Basalt Auth. Votre aide est grandement appr\u00e9ci\u00e9e et contribue \u00e0 l'am\u00e9lioration du projet.</p>"},{"location":"fr/basalt-auth/getting-started.html","title":"Getting Started","text":""},{"location":"fr/basalt-auth/getting-started.html#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<p>Bienvenue dans le guide de d\u00e9marrage rapide de Basalt Auth !</p>"},{"location":"fr/basalt-auth/getting-started.html#installation","title":"Installation","text":"<p>Int\u00e9grer Basalt Auth dans votre projet est un jeu d'enfant.</p> <p>Package : @basalt-lab/basalt-auth</p> <p>Suivez ces \u00e9tapes pour l'ajouter \u00e0 votre projet :</p> <p>NPM : <pre><code>npm i @basalt-lab/basalt-auth\n</code></pre></p> <p>PNPM : <pre><code>pnpm i @basalt-lab/basalt-auth\n</code></pre></p> npm i @basalt-lab/basalt-authadded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>Vous \u00eates pr\u00eat \u00e0 commencer ! Bon d\u00e9veloppement \ud83d\ude80</p>"},{"location":"fr/basalt-auth/index.html","title":"Basalt Auth","text":""},{"location":"fr/basalt-auth/index.html#basalt-auth","title":"Basalt Auth","text":"<p>Warning</p> <p>Basalt est actuellement \u00e0 ses d\u00e9buts, s'il vous pla\u00eet soyez indulgent et n'hesitez pas \u00e0 faire un retour sur votre exp\u00e9rience par mail : basalt-lab@proton.me ou par Discord <code>necrelox</code>.</p>"},{"location":"fr/basalt-auth/index.html#introduction","title":"Introduction","text":"<p>Basalt Auth est un module d'authentification bas\u00e9 sur des tokens, con\u00e7u pour \u00eatre simple \u00e0 utiliser.</p> <p>La particularit\u00e9 de Basalt Auth r\u00e9side dans son syst\u00e8me de paire de cl\u00e9s : chaque token est associ\u00e9 \u00e0 sa propre paire, une caract\u00e9ristique qui le diff\u00e9rencie des JWT standards.</p> <p>C'est un m\u00e9lange entre de l'OAT et des JWT, les tokens ainsi que les clefs publiques doivent \u00eatre stock\u00e9es c\u00f4t\u00e9 serveur pour \u00eatre v\u00e9rifi\u00e9es. Pour cela je conseille l'utilisation d'un store comme Redis ou DragonFly</p>"},{"location":"fr/basalt-auth/index.html#pourquoi-basalt-auth","title":"Pourquoi Basalt Auth ?","text":"<p>L'objectif derri\u00e8re Basalt Auth \u00e9tait de d\u00e9velopper un syst\u00e8me d'authentification personnalis\u00e9 qui s'inspire de la structure des JWT, mais avec quelques subtilit\u00e9s.</p> <p>Cette approche n'est pas n\u00e9cessairement sup\u00e9rieure aux m\u00e9thodes conventionnelles, c'est plut\u00f4t une exploration personnelle dans la conception de syst\u00e8mes d'authentification.</p> <p>Il est important de noter que la s\u00e9curit\u00e9 est une discipline \u00e9volutive, et les m\u00e9rites de cette structure par rapport aux standards \u00e9tablis n'ont pas \u00e9t\u00e9 pleinement \u00e9valu\u00e9s.</p> <p>Warning</p> <p>Basalt Auth ne cherche pas \u00e0 remplacer les solutions existantes, mais plut\u00f4t \u00e0 offrir une alternative pour des cas d'utilisation sp\u00e9cifiques.</p>"},{"location":"fr/basalt-auth/index.html#polyvalence-et-compatibilite","title":"Polyvalence et Compatibilit\u00e9","text":"<p>Basalt Auth est con\u00e7u pour \u00eatre utilis\u00e9 dans un context backend. Il n'a pas de d\u00e9pendances, ce qui le rend facile \u00e0 int\u00e9grer dans n'importe quel projet Node.js.</p>"},{"location":"fr/basalt-auth/references.html","title":"R\u00e9f\u00e9rences","text":"<p>Vous pouvez retrouver les r\u00e9f\u00e9rences de la librairie ici \u27a1\ufe0f https://basalt-lab.github.io/basalt-auth/.</p>"},{"location":"fr/basalt-auth/example/authentication.html","title":"Authentication","text":""},{"location":"fr/basalt-auth/example/authentication.html#signature-dun-token","title":"Signature d'un token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiZDk4MTcwMjgtM2EzZS00YWYyLTgwNzYtOTExZGFlZThiMGIzIiwiZXhwIjoiMjAyNC0wMy0yMlQxMjowOTo0MS4yNThaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.e30=.PJpP4zbxX4SaYD7hIj0wZGIqhSs8SbGdJ0W+o/Pr6WJyOhJTvRsIqQpf8sCvTFWWGyCx5ZGeczT0E1RHBE7GBg=="},{"location":"fr/basalt-auth/example/authentication.html#signature-dun-token-avec-payload","title":"Signature d'un token avec payload","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({\n    usename: 'User1',\n});\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({\n    usename: 'User1',\n});\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiMzAzNjQ2ODMtYWYxMC00NjcyLTkwNTQtMmY2YWNmM2E1ZGNlIiwiZXhwIjoiMjAyNC0wMy0yMlQxMjoxMjo1NS41NjlaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.eyJ1c2VuYW1lIjoiVXNlcjEifQ==.heBWyPtSqmwR/FTShaeqBm7NtCxxE2/faIRc1vQG80mMwOlTTzeWcPD8iNecwtkij/GW6RlEADex4uxCjULFAw=="},{"location":"fr/basalt-auth/example/authentication.html#signature-dun-token-avec-un-temps-dexpiration","title":"Signature d'un token avec un temps d'expiration","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, BasaltTokenExpiry } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\n// you can use enum or number (default is 1 hour)\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({}, BasaltTokenExpiry.ONE_DAY);\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\n// you can use enum or number (default is 1 hour)\nconst tokenSignResult = basaltToken.sign({}, BasaltTokenExpiry.ONE_DAY);\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiZTg5YjYzYTAtMjY0NS00ZjQwLWE5YzYtOGM1Yzg0NmIwNzNlIiwiZXhwIjoiMjAyNC0wMy0yM1QxMToxMDoyMC43NjVaIiwiaXNzdWVyIjoiQmFzYWx0LUlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LUF1ZGllbmNlIn0=.e30=.8f72CeURHH/lYENBqozW1PsmVAr3RLHtBm6hbk/TY1VoamD4WYm1TakCdVQhlUVCL3nYRaFzyQ8zhuS5b3vlCg=="},{"location":"fr/basalt-auth/example/authentication.html#signature-dun-token-issuer-et-audience","title":"Signature d'un token Issuer et Audience","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, BasaltTokenExpiry } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\n// default issuer is 'Basalt-Issuer' and default audience is 'Basalt-Audience'\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign(\n    {}, BasaltTokenExpiry.ONE_HOUR, 'Basalt-issuer', 'Basalt-audience'\n);\nconsole.log(tokenSignResult.token);\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\n// default issuer is 'Basalt-Issuer' and default audience is 'Basalt-Audience'\nconst tokenSignResult = basaltToken.sign(\n    {}, BasaltTokenExpiry.ONE_HOUR, 'Basalt-issuer', 'Basalt-audience'\n);\nconsole.log(tokenSignResult.token);\n</code></pre> node example.jseyJ1dWlkIjoiNzBmYTFiZDEtOWEwNy00Mzk5LWI4Y2YtZTg3ZTNkNDVhNzU2IiwiZXhwIjoiMjAyNC0wMy0yMlQxMjoxMTozOS4zNDZaIiwiaXNzdWVyIjoiQmFzYWx0LWlzc3VlciIsImF1ZGllbmNlIjoiQmFzYWx0LWF1ZGllbmNlIn0=.e30=.3teaXCzVkSLI5+1Hr84le4l9FqqZFjLeHAYGqSDOzK9453tI276ysihygMA5oq8aabYSl4/Fn6Hm5T/p+88ZDQ=="},{"location":"fr/basalt-auth/example/authentication.html#verification-dun-token","title":"V\u00e9rification d'un token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\ntry {\n    basaltToken.verify(tokenSignResult.token, tokenSignResult.publicKey)\n    console.log('Token is valid');\n} catch (error) {\n    console.error(error);\n}\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\ntry {\n    basaltToken.verify(tokenSignResult.token, tokenSignResult.publicKey)\n    console.log('Token is valid');\n} catch (error) {\n    console.error(error);\n}\n</code></pre> node example.jsToken is valid"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-de-luuid-du-token","title":"R\u00e9cup\u00e9ration de l'uuid du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getTokenUuid(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getTokenUuid(tokenSignResult.token));\n</code></pre> node example.jsc4a198c4-2717-470d-886f-bc2921badd8f"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-de-lexpiration","title":"Recup\u00e9ration de l'expiration","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getExpirationDate(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getExpirationDate(tokenSignResult.token));\n</code></pre> node example.js2024-03-22T12:03:38.266Z"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-de-laudiance-du-token","title":"R\u00e9cup\u00e9ration de l'audiance du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getAudience(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getAudience(tokenSignResult.token));\n</code></pre> node example.jsBasalt-Audience"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-de-lemetteur-du-token","title":"R\u00e9cup\u00e9ration de l'\u00e9metteur du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getIssuer(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken, BasaltTokenExpiry } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconsole.log(basaltToken.getIssuer(tokenSignResult.token));\n</code></pre> node example.jsBasalt-Issuer"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-du-header-du-token","title":"R\u00e9cup\u00e9ration du header du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult, type IBasaltTokenHeader } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\n\nconst tokenHeader: IBasaltTokenHeader = basaltToken.getHeader(tokenSignResult.token);\nconsole.log(tokenHeader);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\n\nconst tokenHeader = basaltToken.getHeader(tokenSignResult.token);\nconsole.log(tokenHeader);\n</code></pre> node example.js{  uuid: '82e7fa41-44b4-4fa8-ac31-ae309234bb8b',  exp: '2024-03-22T12:19:58.187Z',  issuer: 'Basalt-Audience',  audience: 'Basalt-Audience'}"},{"location":"fr/basalt-auth/example/authentication.html#recuperation-du-payload-du-token","title":"R\u00e9cup\u00e9ration du payload du token","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({\n    username: 'user1'\n});\nconst tokenPayload: { username: string } = basaltToken.getPayload(tokenSignResult.token);\nconsole.log(tokenPayload);\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({\n    username: 'user1'\n});\nconst tokenPayload = basaltToken.getPayload(tokenSignResult.token);\nconsole.log(tokenPayload);\n</code></pre> node example.js{ username: 'user1' }"},{"location":"fr/basalt-auth/example/authentication.html#verifier-si-le-token-a-expire","title":"V\u00e9rifier si le token a expir\u00e9","text":"TypeScriptJavaScript <pre><code>import { BasaltToken, type IBasaltTokenSignResult } from '@basalt-lab/basalt-auth';\n\nconst basaltToken: BasaltToken = new BasaltToken();\nconst tokenSignResult: IBasaltTokenSignResult = basaltToken.sign({});\nconsole.log(basaltToken.isExpired(tokenSignResult.token));\n</code></pre> <pre><code>const { BasaltToken } = require('@basalt-lab/basalt-auth');\n\nconst basaltToken = new BasaltToken();\nconst tokenSignResult = basaltToken.sign({});\nconsole.log(basaltToken.isExpired(tokenSignResult.token));\n</code></pre> node example.jsfalse"},{"location":"fr/basalt-helper/contribution.html","title":"Contribuer \u00e0 Basalt Helper","text":""},{"location":"fr/basalt-helper/contribution.html#introduction","title":"Introduction","text":"<p>Si vous souhaiter contribuer \u00e0 Basalt Helper, ce serait avec plaisir !</p> <p>Les \u00e9tapes suivantes vous guideront \u00e0 travers le processus de contribution, en vous aidant \u00e0 comprendre comment vous pouvez apporter votre aide au projet.</p>"},{"location":"fr/basalt-helper/contribution.html#processus-de-contribution","title":"Processus de contribution","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork le projet    Commencez par cr\u00e9er un fork du d\u00e9p\u00f4t sur GitHub. Cela vous aidera \u00e0 cr\u00e9er votre propre copie du projet sur votre compte, vous permettant d'y apporter des modifications librement.</li> <li>Cr\u00e9ez votre branche de fonctionnalit\u00e9 (<code>git checkout -b feature/AmazingFeature</code>)     Cr\u00e9ez une nouvelle branche pour travailler sur votre fonctionnalit\u00e9 \u00e0 partir de la branche <code>stage</code>.</li> <li>Committez vos changements (<code>git commit -m 'feat: Add some AmazingFeature'</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les commiter et les pr\u00e9parer pour le push.     Veuillez utiliser des conventionnal commits pour vos messages de commit, cela permettra de g\u00e9n\u00e9rer automatiquement les notes de version.</li> <li>Push vers la branche (<code>git push origin feature/AmazingFeature</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les pousser vers votre fork.</li> <li>Ouvrez une Pull Request vers la branche <code>stage</code>     Une fois que vous avez pouss\u00e9 vos modifications vers votre fork, vous pouvez ouvrir une Pull Request vers la branche <code>stage</code> du d\u00e9p\u00f4t principal.</li> <li>Apr\u00e8s la validation de votre Pull Request, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.     Une fois que votre Pull Request a \u00e9t\u00e9 valid\u00e9e, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.</li> </ol> <p>Note</p> <p>Assurez-vous de toujours mettre \u00e0 jour votre branche locale avec la branche <code>stage</code> avant de commencer \u00e0 travailler sur une nouvelle fonctionnalit\u00e9 pour vous assurer que vous travaillez avec la derni\u00e8re version du projet.</p>"},{"location":"fr/basalt-helper/contribution.html#notes-supplementaires","title":"Notes suppl\u00e9mentaires","text":"<p>Assurez-vous de tester toutes vos modifications et d'ajouter des tests lorsque cela est possible.  </p> <p>Soyez ouvert aux retours et aux suggestions sur votre pull request.</p>"},{"location":"fr/basalt-helper/contribution.html#remerciement","title":"Remerciement","text":"<p>Je vous remercie sinc\u00e8rement pour votre int\u00e9r\u00eat \u00e0 contribuer \u00e0 Basalt Helper. Votre aide est grandement appr\u00e9ci\u00e9e et contribue \u00e0 l'am\u00e9lioration du projet.</p>"},{"location":"fr/basalt-helper/getting-started.html","title":"Getting Started","text":""},{"location":"fr/basalt-helper/getting-started.html#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<p>Bienvenue dans le guide de d\u00e9marrage rapide de Basalt Helper !</p>"},{"location":"fr/basalt-helper/getting-started.html#installation","title":"Installation","text":"<p>Int\u00e9grer Basalt Helper dans votre projet est un jeu d'enfant.</p> <p>Package : @basalt-lab/basalt-helper</p> <p>Suivez ces \u00e9tapes pour l'ajouter \u00e0 votre projet :</p> <p>NPM: <pre><code>npm i @basalt-lab/basalt-helper\n</code></pre></p> <p>PNPM: <pre><code>pnpm i @basalt-lab/basalt-helper\n</code></pre></p> npm i @basalt-lab/basalt-helperadded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>Vous \u00eates pr\u00eat \u00e0 commencer ! Bon d\u00e9veloppement \ud83d\ude80</p>"},{"location":"fr/basalt-helper/index.html","title":"Basalt Helper","text":""},{"location":"fr/basalt-helper/index.html#basalt-helper","title":"Basalt Helper","text":"<p>Warning</p> <p>Basalt est actuellement \u00e0 ses d\u00e9buts, s'il vous pla\u00eet soyez indulgent et n'hesitez pas \u00e0 faire un retour sur votre exp\u00e9rience par mail : basalt-lab@proton.me ou par Discord <code>necrelox</code>.</p>"},{"location":"fr/basalt-helper/index.html#introduction","title":"Introduction","text":"<p>Basalt Helper est un package utilitaire.</p> <p>Il fournit plusieurs outils qui se veut simple d'utilisation et efficace.</p>"},{"location":"fr/basalt-helper/index.html#pourquoi-basalt-helper","title":"Pourquoi Basalt Helper ?","text":"<p>Le choix de Basalt Helper s'explique par sa simplicit\u00e9 et son efficacit\u00e9.</p> <p>Il est con\u00e7u pour \u00eatre facile \u00e0 int\u00e9grer dans n'importe quel projet Node.js, offrant une vari\u00e9t\u00e9 d'outils pour simplifier les t\u00e2ches de d\u00e9veloppement courantes.</p> <p>Il va continuer \u00e0 \u00e9voluer et proposer de nouvelles fonctionnalit\u00e9s, tout en restant le plus simple possible pour les d\u00e9veloppeurs.</p>"},{"location":"fr/basalt-helper/references.html","title":"R\u00e9f\u00e9rences","text":"<p>Vous pouvez retrouver les r\u00e9f\u00e9rences de la librairie ici \u27a1\ufe0f https://basalt-lab.github.io/basalt-helper/.</p>"},{"location":"fr/basalt-helper/example/data/basalt-data.html","title":"BasaltData","text":""},{"location":"fr/basalt-helper/example/data/basalt-data.html#clonage-profond","title":"Clonage profond","text":"TypeScriptJavaScript <pre><code>import { basaltData } from '@basalt-lab/basalt-helper';\n\nconst data1: { test: { test: string } } = {\n    test: {\n        test: 'test'\n    }\n};\nconst data2: number[][] = [[1, 2, 3], [4, 5, 6]];\nconst data3: { test: { test: number[] } } = {\n    test: {\n        test: [1, 2, 3]\n    }\n};\nconst data4: Array&lt;{ test: number[] }&gt; = [\n    {\n        test: [1, 2, 3]\n    },\n    {\n        test: [4, 5, 6]\n    }\n];\n\nconst clonedData1: { test: { test: string } } = basaltData.deepClone(data1);\nconst clonedData2: number[][] = basaltData.deepClone(data2);\nconst clonedData3: { test: { test: number[] } } = basaltData.deepClone(data3);\nconst clonedData4: Array&lt;{ test: number[] }&gt; = basaltData.deepClone(data4);\n\nconsole.log(clonedData1 === data1);\nconsole.log(clonedData2 === data2);\nconsole.log(clonedData3 === data3);\nconsole.log(clonedData4 === data4);\n</code></pre> <pre><code>const { basaltData } = require('@basalt-lab/basalt-helper');\n\nconst data1 = {\n    test: {\n        test: 'test'\n    }\n};\nconst data2 = [[1, 2, 3], [4, 5, 6]];\nconst data3 = {\n    test: {\n        test: [1, 2, 3]\n    }\n};\nconst data4 = [\n    {\n        test: [1, 2, 3]\n    },\n    {\n        test: [4, 5, 6]\n    }\n];\n\nconst clonedData1 = basaltData.deepClone(data1);\nconst clonedData2 = basaltData.deepClone(data2);\nconst clonedData3 = basaltData.deepClone(data3);\nconst clonedData4 = basaltData.deepClone(data4);\n\nconsole.log(clonedData1 === data1);\nconsole.log(clonedData2 === data2);\nconsole.log(clonedData3 === data3);\nconsole.log(clonedData4 === data4);\n</code></pre> node example.jsfalsefalsefalsefalse"},{"location":"fr/basalt-helper/example/data/basalt-data.html#inclure-uniquement-certaines-cles","title":"Inclure uniquement certaines cl\u00e9s","text":"TypeScriptJavaScript <pre><code>import { basaltData } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByKeyInclusion(data, ['a', 'b', 'c']);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { basaltData } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByKeyInclusion(data, ['a', 'b', 'c']);\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a', b: 'b', c: 'c' }"},{"location":"fr/basalt-helper/example/data/basalt-data.html#inclure-uniquement-certaines-cles-et-seulement-si-elles-ont-une-valeur","title":"Inclure uniquement certaines cl\u00e9s et seulement si elles ont une valeur","text":"TypeScriptJavaScript <pre><code>import { basaltData } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: undefined; c: null; d: string } = {\n    a: 'a',\n    b: undefined,\n    c: null,\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByKeyInclusion(data, ['a', 'b', 'c'], true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { basaltData } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: undefined,\n    c: null,\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByKeyInclusion(data, ['a', 'b', 'c'], true);\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a' }"},{"location":"fr/basalt-helper/example/data/basalt-data.html#exclure-certaines-cles","title":"Exclure certaines cl\u00e9s","text":"TypeScriptJavaScript <pre><code>import { basaltData } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByKeyExclusion(data, ['a', 'b']);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { basaltData } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByKeyExclusion(data, ['a', 'b']);\nconsole.log(filteredData);\n</code></pre> node example.js{ c: 'c', d: 'd' }"},{"location":"fr/basalt-helper/example/data/basalt-data.html#exclure-certaines-cles-et-exclure-ceux-qui-nont-pas-de-valeur","title":"Exclure certaines cl\u00e9s et exclure ceux qui n'ont pas de valeur","text":"TypeScriptJavaScript <pre><code>import { basaltData } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: null; c: undefined; d: string } = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByKeyExclusion(data, ['a'], true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { basaltData } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByKeyExclusion(data, ['a'], true);\nconsole.log(filteredData);\n</code></pre> node example.js{ d: 'd' }"},{"location":"fr/basalt-helper/example/data/basalt-data.html#inclure-les-clefs-selon-un-pattern","title":"Inclure les clefs selon un pattern","text":"TypeScriptJavaScript <pre><code>import { basaltData } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByValue(data, (value: string): boolean =&gt; value === 'a' || value === 'b');\nconsole.log(filteredData);\n</code></pre> <pre><code>const { basaltData } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByValue(data, (value) =&gt; value === 'a' || value === 'b');\nconsole.log(filteredData);\n</code></pre> node example.js{ a: 'a', b: 'b' }"},{"location":"fr/basalt-helper/example/data/basalt-data.html#exclure-les-clefs-selon-un-pattern","title":"Exclure les clefs selon un pattern","text":"TypeScriptJavaScript <pre><code>import { basaltData } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: string; c: string; d: string } = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByValue(data, (value: string): boolean =&gt; value !== 'a' &amp;&amp; value !== 'b');\nconsole.log(filteredData);\n</code></pre> <pre><code>const { basaltData } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: 'b',\n    c: 'c',\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByValue(data, (value) =&gt; value !== 'a' &amp;&amp; value !== 'b');\nconsole.log(filteredData);\n</code></pre> node example.js{ c: 'c', d: 'd' }"},{"location":"fr/basalt-helper/example/data/basalt-data.html#exclure-les-clefs-selon-un-pattern-et-exclure-ceux-qui-nont-pas-de-valeur","title":"Exclure les clefs selon un pattern et exclure ceux qui n'ont pas de valeur","text":"TypeScriptJavaScript <pre><code>import { basaltData } from '@basalt-lab/basalt-helper';\n\nconst data: { a: string; b: null; c: undefined; d: string } = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByValue(data, (value: unknown): boolean =&gt; value !== 'a', true);\nconsole.log(filteredData);\n</code></pre> <pre><code>const { basaltData } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    a: 'a',\n    b: null,\n    c: undefined,\n    d: 'd',\n};\n\nconst filteredData = basaltData.filterByValue(data, (value) =&gt; value !== 'a', true);\nconsole.log(filteredData);\n</code></pre> node example.js{ d: 'd' }"},{"location":"fr/basalt-helper/example/data/basalt-data.html#transformation-des-cles-dun-objet-en-camelcase","title":"Transformation des cl\u00e9s d'un objet en camelCase","text":"TypeScriptJavaScript <pre><code>import { basaltData, BasaltCamelCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(basaltData.transformKeys(data, new BasaltCamelCaseTransformer()));\n</code></pre> <pre><code>const { basaltData, BasaltCamelCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(basaltData.transformKeys(data, new BasaltCamelCaseTransformer()));\n</code></pre> node example.js{  camelCase: undefined,  pascalCase: undefined,  kebabCase: undefined,  snakeCase: undefined}"},{"location":"fr/basalt-helper/example/data/basalt-data.html#transformation-des-cles-dun-objet-en-pascalcase","title":"Transformation des cl\u00e9s d'un objet en PascalCase","text":"TypeScriptJavaScript <pre><code>import { basaltData, BasaltPascalCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(basaltData.transformKeys(data, new BasaltPascalCaseTransformer()));\n</code></pre> <pre><code>const { basaltData, BasaltPascalCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(basaltData.transformKeys(data, new BasaltPascalCaseTransformer()));\n</code></pre> node example.js{  CamelCase: undefined,  PascalCase: undefined,  KebabCase: undefined,  SnakeCase: undefined}"},{"location":"fr/basalt-helper/example/data/basalt-data.html#transformation-des-cles-dun-objet-en-kebab-case","title":"Transformation des cl\u00e9s d'un objet en kebab-case","text":"TypeScriptJavaScript <pre><code>import { basaltData, BasaltKebabCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(basaltData.transformKeys(data, new BasaltKebabCaseTransformer()));\n</code></pre> <pre><code>const { basaltData, BasaltKebabCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(basaltData.transformKeys(data, new BasaltKebabCaseTransformer()));\n</code></pre> node example.js{  'camel-case': undefined,  'pascal-case': undefined,  'kebab-case': undefined,  'snake-case': undefined}"},{"location":"fr/basalt-helper/example/data/basalt-data.html#transformation-des-cles-dun-objet-en-snake_case","title":"Transformation des cl\u00e9s d'un objet en snake_case","text":"TypeScriptJavaScript <pre><code>import { basaltData, BasaltSnakeCaseTransformer } from '@basalt-lab/basalt-helper';\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(basaltData.transformKeys(data, new BasaltSnakeCaseTransformer()));\n</code></pre> <pre><code>const { basaltData, BasaltSnakeCaseTransformer } = require('@basalt-lab/basalt-helper');\n\nconst data = {\n    'camelCase': undefined,\n    'PascalCase': undefined,\n    'kebab-case': undefined,\n    'snake_case': undefined\n};\n\nconsole.log(basaltData.transformKeys(data, new BasaltSnakeCaseTransformer()));\n</code></pre> node example.js{  camel_case: undefined,  pascal_case: undefined,  kebab_case: undefined,  snake_case: undefined}"},{"location":"fr/basalt-helper/example/security/basalt-security.html","title":"BasaltSecurity","text":""},{"location":"fr/basalt-helper/example/security/basalt-security.html#hasher-un-mot-de-passe","title":"Hasher un mot de passe","text":"TypeScriptJavaScript <pre><code>import { basaltPassword } from '@basalt-lab/basalt-core';\n\nconst password: string = 'password';\nconst hashedPassword: string = await basaltPassword.hashPassword(password);\nconsole.log(hashedPassword);\n</code></pre> <pre><code>const { basaltPassword } = require('@basalt-lab/basalt-core');\n\nconst password = 'password';\nconst hashedPassword = await basaltPassword.hashPassword(password);\nconsole.log(hashedPassword);\n</code></pre> node example.js$argon2id$v=19$m=65536,t=3,p=20$W1Qv4XJ+jaVDI04sLFukTYXI/7FYuyeavMLNUXnnrPQ$JfQgEbewRGjjGIpGEIDp/vIqeX7avK2DqYIddilsqng"},{"location":"fr/basalt-helper/example/security/basalt-security.html#verifier-un-mot-de-passe","title":"V\u00e9rifier un mot de passe","text":"TypeScriptJavaScript <pre><code>import { basaltPassword } from '@basalt-lab/basalt-core';\n\nconst password: string = 'password';\nconst hashedPassword: string = await basaltPassword.hashPassword(password);\nconst isPasswordValid: boolean = await basaltPassword.verifyPassword(password, hashedPassword);\nconsole.log(isPasswordValid);\n</code></pre> <pre><code>const { basaltPassword } = require('@basalt-lab/basalt-core');\n\nconst password = 'password';\nconst hashedPassword = await basaltPassword.hashPassword(password);\nconst isPasswordValid = await basaltPassword.verifyPassword(password, hashedPassword);\nconsole.log(isPasswordValid);\n</code></pre> node example.jstrue"},{"location":"fr/basalt-logger/contribution.html","title":"Contribuer \u00e0 Basalt Logger","text":""},{"location":"fr/basalt-logger/contribution.html#introduction","title":"Introduction","text":"<p>Si vous souhaiter contribuer \u00e0 Basalt Logger, ce serait avec plaisir !</p> <p>Les \u00e9tapes suivantes vous guideront \u00e0 travers le processus de contribution, en vous aidant \u00e0 comprendre comment vous pouvez apporter votre aide au projet.</p>"},{"location":"fr/basalt-logger/contribution.html#processus-de-contribution","title":"Processus de contribution","text":"<pre><code>gitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch stage\ncheckout stage\ncommit\nbranch feature\ncheckout feature\ncommit\ncommit\ncheckout stage\nmerge feature\ncheckout main\nmerge stage</code></pre> <ol> <li>Fork le projet    Commencez par cr\u00e9er un fork du d\u00e9p\u00f4t sur GitHub. Cela vous aidera \u00e0 cr\u00e9er votre propre copie du projet sur votre compte, vous permettant d'y apporter des modifications librement.</li> <li>Cr\u00e9ez votre branche de fonctionnalit\u00e9 (<code>git checkout -b feature/AmazingFeature</code>)     Cr\u00e9ez une nouvelle branche pour travailler sur votre fonctionnalit\u00e9 \u00e0 partir de la branche <code>stage</code>.</li> <li>Committez vos changements (<code>git commit -m 'feat: Add some AmazingFeature'</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les commiter et les pr\u00e9parer pour le push.     Veuillez utiliser des conventionnal commits pour vos messages de commit, cela permettra de g\u00e9n\u00e9rer automatiquement les notes de version.</li> <li>Push vers la branche (<code>git push origin feature/AmazingFeature</code>)     Une fois que vous avez termin\u00e9 vos modifications, vous pouvez les pousser vers votre fork.</li> <li>Ouvrez une Pull Request vers la branche <code>stage</code>     Une fois que vous avez pouss\u00e9 vos modifications vers votre fork, vous pouvez ouvrir une Pull Request vers la branche <code>stage</code> du d\u00e9p\u00f4t principal.</li> <li>Apr\u00e8s la validation de votre Pull Request, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.     Une fois que votre Pull Request a \u00e9t\u00e9 valid\u00e9e, votre branche sera fusionn\u00e9e dans <code>stage</code> et supprim\u00e9e.</li> </ol> <p>Note</p> <p>Assurez-vous de toujours mettre \u00e0 jour votre branche locale avec la branche <code>stage</code> avant de commencer \u00e0 travailler sur une nouvelle fonctionnalit\u00e9 pour vous assurer que vous travaillez avec la derni\u00e8re version du projet.</p>"},{"location":"fr/basalt-logger/contribution.html#notes-supplementaires","title":"Notes suppl\u00e9mentaires","text":"<p>Assurez-vous de tester toutes vos modifications et d'ajouter des tests lorsque cela est possible.  </p> <p>Soyez ouvert aux retours et aux suggestions sur votre pull request.</p>"},{"location":"fr/basalt-logger/contribution.html#remerciement","title":"Remerciement","text":"<p>Je vous remercie sinc\u00e8rement pour votre int\u00e9r\u00eat \u00e0 contribuer \u00e0 Basalt Logger. Votre aide est grandement appr\u00e9ci\u00e9e et contribue \u00e0 l'am\u00e9lioration du projet.</p>"},{"location":"fr/basalt-logger/getting-started.html","title":"Getting Started","text":""},{"location":"fr/basalt-logger/getting-started.html#demarrage-rapide","title":"D\u00e9marrage rapide","text":"<p>Bienvenue dans le guide de d\u00e9marrage rapide de Basalt Logger !</p>"},{"location":"fr/basalt-logger/getting-started.html#installation","title":"Installation","text":"<p>Int\u00e9grer Basalt Logger dans votre projet est un jeu d'enfant.</p> <p>Package : @basalt-lab/basalt-logger</p> <p>Suivez ces \u00e9tapes pour l'ajouter \u00e0 votre projet :</p> <p>NPM: <pre><code>npm i @basalt-lab/basalt-logger\n</code></pre></p> <p>PNPM: <pre><code>pnpm i @basalt-lab/basalt-logger\n</code></pre></p> npm i @basalt-lab/basalt-loggeradded 1 package, and audited 1 package in 1sfound 0 vulnerabilities <p>Vous \u00eates pr\u00eat \u00e0 commencer ! Bon d\u00e9veloppement \ud83d\ude80</p>"},{"location":"fr/basalt-logger/index.html","title":"Basalt Logger","text":""},{"location":"fr/basalt-logger/index.html#basalt-logger","title":"Basalt Logger","text":"<p>Warning</p> <p>Basalt est actuellement \u00e0 ses d\u00e9buts, s'il vous pla\u00eet soyez indulgent et n'hesitez pas \u00e0 faire un retour sur votre exp\u00e9rience par mail : basalt-lab@proton.me ou par Discord <code>necrelox</code>.</p>"},{"location":"fr/basalt-logger/index.html#introduction","title":"Introduction","text":"<p>Basalt Logger est une biblioth\u00e8que de logging flexible et robuste pour TypeScript/JavaScript, con\u00e7ue pour une utilisation facile et intuitive dans divers environnements de d\u00e9veloppement. Gr\u00e2ce \u00e0 sa structure modulaire et ses strat\u00e9gies de logging extensibles, Basalt Logger s'adapte parfaitement \u00e0 tout projet n\u00e9cessitant une journalisation d\u00e9taill\u00e9e et personnalisable.</p> <p>La facilit\u00e9 d'int\u00e9gration de Basalt Logger dans vos applications TypeScript/JavaScript vous permet d'enrichir vos projets avec un syst\u00e8me de journalisation puissant sans alourdir votre code.</p>"},{"location":"fr/basalt-logger/index.html#pourquoi-basalt-logger","title":"Pourquoi Basalt Logger ?","text":"<ul> <li>Polyvalence: Adaptable \u00e0 divers environnements et exigences, gr\u00e2ce \u00e0 son architecture flexible.</li> <li>Extensibilit\u00e9: Permet l'ajout de strat\u00e9gies de logging personnalis\u00e9es, telles que la journalisation dans la console ou dans des fichiers. Vous pouvez \u00e9galement cr\u00e9er vos propres strat\u00e9gies de logging pour r\u00e9pondre \u00e0 des besoins sp\u00e9cifiques.</li> <li>Facilit\u00e9 d'utilisation: Con\u00e7ue pour \u00eatre intuitive, avec une API simple et des exemples de code pour une mise en route rapide.</li> <li>Performance et Non-Bloquant: Con\u00e7u pour \u00eatre l\u00e9ger et efficace, Basalt Logger assure une journalisation rapide et non bloquante, minimisant ainsi l'impact sur les performances de l'application.</li> </ul>"},{"location":"fr/basalt-logger/references.html","title":"R\u00e9f\u00e9rences","text":"<p>Vous pouvez retrouver les r\u00e9f\u00e9rences de la librairie ici \u27a1\ufe0f https://basalt-lab.github.io/basalt-logger/.</p>"},{"location":"fr/basalt-logger/example/logger.html","title":"Logger","text":""},{"location":"fr/basalt-logger/example/logger.html#ajout-dune-strategie-de-log","title":"Ajout d'une strategie de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nlogger.log('hello world');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nlogger.log('hello world');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : hello world"},{"location":"fr/basalt-logger/example/logger.html#suppression-dune-strategie-specifique-de-log","title":"Suppression d'une strategie specifique de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nlogger.removeStrategy('console');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nlogger.removeStrategy('console');\n</code></pre>"},{"location":"fr/basalt-logger/example/logger.html#suppression-de-toutes-les-strategies-de-log","title":"Suppression de toutes les strategies de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy } from '@basalt-lab/basalt-logger';\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nlogger.clearStrategies();\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nlogger.clearStrategies();\n</code></pre>"},{"location":"fr/basalt-logger/example/logger.html#creation-dune-strategie-de-log","title":"Cr\u00e9ation d'une strategie de log","text":"TypeScriptJavaScript <pre><code>import { appendFileSync } from 'fs';\nimport { BasaltLogger, ILoggerStrategy, LogLevels}  from '@basalt-lab/basalt-logger';\n\nclass FileLoggerStrategy implements ILoggerStrategy {\n    public log(level: LogLevels, date: Date, object: unknown): void {\n        const prefixDate: string = `[${date.toISOString().replace(/T/, ' ').replace(/\\..+/, '')}]`;\n        const sanitizedObject: string = typeof object === 'string' ? object : JSON.stringify(object);\n        const message: string = `${prefixDate} ${level} : ${sanitizedObject}`;\n        appendFile('./test.log', `${message}\\n`, (err): void =&gt; {\n            if (err) throw err;\n        });\n    }\n}\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('file', new FileLoggerStrategy());\nlogger.log('Hello World');\n</code></pre> <pre><code>const { appendFileSync } = require('fs');\nconst { BasaltLogger, LogLevels } = require('@basalt-lab/basalt-logger');\n\nclass FileLoggerStrategy {\n    log(level, date, object) {\n        const prefixDate = `[${date.toISOString().replace(/T/, ' ').replace(/\\..+/, '')}]`;\n        const sanitizedObject = typeof object === 'string' ? object : JSON.stringify(object);\n        const message = `${prefixDate} ${level} : ${sanitizedObject}`;\n        appendFile('./test.log', `${message}\\n`, (err) =&gt; {\n            if (err) throw err;\n        });\n    }\n}\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('file', new FileLoggerStrategy());\nlogger.log('Hello World');\n</code></pre> node example.jscat test.log[2023-11-21 00:00:00] LOG : Hello World"},{"location":"fr/basalt-logger/example/logger.html#ajout-de-plusieurs-strategies-de-log","title":"Ajout de plusieurs strategies de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy}  from '@basalt-lab/basalt-logger';\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nlogger.log('Hello World');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nlogger.log('Hello World');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : Hello Worldcat log.txt[2023-11-21 00:00:00] LOG : Hello World"},{"location":"fr/basalt-logger/example/logger.html#tout-les-niveaux-de-log","title":"Tout les niveaux de log","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy }  from '@basalt-lab/basalt-logger';\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nlogger.log('hello world');\nlogger.info('hello world');\nlogger.debug('hello world');\nlogger.warn('hello world');\nlogger.error('hello world');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategy('console', new ConsoleLoggerStrategy());\n\nlogger.log('hello world');\nlogger.info('hello world');\nlogger.debug('hello world');\nlogger.warn('hello world');\nlogger.error('hello world');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : hello world[2023-11-21 00:00:00] INFO : hello world[2023-11-21 00:00:00] DEBUG : hello world[2023-11-21 00:00:00] WARN : hello world[2023-11-21 00:00:00] ERROR : hello world"},{"location":"fr/basalt-logger/example/logger.html#log-sur-une-strategie-specifique","title":"Log sur une strategie specifique","text":"TypeScriptJavaScript <pre><code>import { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy}  from '@basalt-lab/basalt-logger';\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nlogger.log('console strategy', ['console']);\nlogger.log('file strategy', ['file']);\nlogger.log('console and file strategy', ['console', 'file']);\nlogger.log('all strategies');\n</code></pre> <pre><code>const { BasaltLogger, ConsoleLoggerStrategy, FileLoggerStrategy } = require('@basalt-lab/basalt-logger');\n\nconst logger = new BasaltLogger();\n\nlogger.addStrategies([\n    ['console', new ConsoleLoggerStrategy()],\n    ['file', new FileLoggerStrategy('log.txt')]\n]);\n\nlogger.log('console strategy', ['console']);\nlogger.log('file strategy', ['file']);\nlogger.log('console and file strategy', ['console', 'file']);\nlogger.log('all strategies');\n</code></pre> node example.js[2023-11-21 00:00:00] LOG : console strategy[2023-11-21 00:00:00] LOG : console and file strategy[2023-11-21 00:00:00] LOG : all strategiescat log.txt[2023-11-21 00:00:00] LOG : file strategy[2023-11-21 00:00:00 LOG : console and file strategy[2023-11-21 00:00:00 LOG : all strategies"}]}